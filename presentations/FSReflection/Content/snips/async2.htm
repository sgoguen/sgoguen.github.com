<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 
<html xmlns="http://www.w3.org/1999/xhtml">
<head><link rel="stylesheet" type="text/css" href="style.css" />
<script type="text/javascript" src="tips.js"></script></head><body>
<pre class="fssnip">
<span class="l"> 1: </span><span class="k">let</span> <span onmouseout="hideTip(event, 'fstips1', 1)" onmouseover="showTip(event, 'fstips1', 1)" class="i">Bind</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fstips2', 2)" onmouseover="showTip(event, 'fstips2', 2)" class="i">async</span><span class="o">.</span><span onmouseout="hideTip(event, 'fstips3', 3)" onmouseover="showTip(event, 'fstips3', 3)" class="i">Bind</span>
<span class="l"> 2: </span><span class="k">let</span> <span onmouseout="hideTip(event, 'fstips4', 4)" onmouseover="showTip(event, 'fstips4', 4)" class="i">Combine</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fstips2', 5)" onmouseover="showTip(event, 'fstips2', 5)" class="i">async</span><span class="o">.</span><span onmouseout="hideTip(event, 'fstips5', 6)" onmouseover="showTip(event, 'fstips5', 6)" class="i">Combine</span>
<span class="l"> 3: </span><span class="k">let</span> <span onmouseout="hideTip(event, 'fstips6', 7)" onmouseover="showTip(event, 'fstips6', 7)" class="i">Delay</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fstips2', 8)" onmouseover="showTip(event, 'fstips2', 8)" class="i">async</span><span class="o">.</span><span onmouseout="hideTip(event, 'fstips7', 9)" onmouseover="showTip(event, 'fstips7', 9)" class="i">Delay</span>
<span class="l"> 4: </span><span class="k">let</span> <span onmouseout="hideTip(event, 'fstips8', 10)" onmouseover="showTip(event, 'fstips8', 10)" class="i">For</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fstips2', 11)" onmouseover="showTip(event, 'fstips2', 11)" class="i">async</span><span class="o">.</span><span onmouseout="hideTip(event, 'fstips9', 12)" onmouseover="showTip(event, 'fstips9', 12)" class="i">For</span>
<span class="l"> 5: </span><span class="k">let</span> <span onmouseout="hideTip(event, 'fstips10', 13)" onmouseover="showTip(event, 'fstips10', 13)" class="i">Return</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fstips2', 14)" onmouseover="showTip(event, 'fstips2', 14)" class="i">async</span><span class="o">.</span><span onmouseout="hideTip(event, 'fstips11', 15)" onmouseover="showTip(event, 'fstips11', 15)" class="i">Return</span>
<span class="l"> 6: </span><span class="k">let</span> <span onmouseout="hideTip(event, 'fstips12', 16)" onmouseover="showTip(event, 'fstips12', 16)" class="i">ReturnFrom</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fstips2', 17)" onmouseover="showTip(event, 'fstips2', 17)" class="i">async</span><span class="o">.</span><span onmouseout="hideTip(event, 'fstips13', 18)" onmouseover="showTip(event, 'fstips13', 18)" class="i">ReturnFrom</span>
<span class="l"> 7: </span><span class="k">let</span> <span onmouseout="hideTip(event, 'fstips14', 19)" onmouseover="showTip(event, 'fstips14', 19)" class="i">TryFinally</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fstips2', 20)" onmouseover="showTip(event, 'fstips2', 20)" class="i">async</span><span class="o">.</span><span onmouseout="hideTip(event, 'fstips15', 21)" onmouseover="showTip(event, 'fstips15', 21)" class="i">TryFinally</span>
<span class="l"> 8: </span><span class="k">let</span> <span onmouseout="hideTip(event, 'fstips16', 22)" onmouseover="showTip(event, 'fstips16', 22)" class="i">TryWith</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fstips2', 23)" onmouseover="showTip(event, 'fstips2', 23)" class="i">async</span><span class="o">.</span><span onmouseout="hideTip(event, 'fstips17', 24)" onmouseover="showTip(event, 'fstips17', 24)" class="i">TryWith</span>
<span class="l"> 9: </span><span class="k">let</span> <span onmouseout="hideTip(event, 'fstips18', 25)" onmouseover="showTip(event, 'fstips18', 25)" class="i">Using</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fstips2', 26)" onmouseover="showTip(event, 'fstips2', 26)" class="i">async</span><span class="o">.</span><span onmouseout="hideTip(event, 'fstips19', 27)" onmouseover="showTip(event, 'fstips19', 27)" class="i">Using</span>
<span class="l">10: </span><span class="k">let</span> <span onmouseout="hideTip(event, 'fstips20', 28)" onmouseover="showTip(event, 'fstips20', 28)" class="i">While</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fstips2', 29)" onmouseover="showTip(event, 'fstips2', 29)" class="i">async</span><span class="o">.</span><span onmouseout="hideTip(event, 'fstips21', 30)" onmouseover="showTip(event, 'fstips21', 30)" class="i">While</span>
<span class="l">11: </span><span class="k">let</span> <span onmouseout="hideTip(event, 'fstips22', 31)" onmouseover="showTip(event, 'fstips22', 31)" class="i">Zero</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fstips2', 32)" onmouseover="showTip(event, 'fstips2', 32)" class="i">async</span><span class="o">.</span><span onmouseout="hideTip(event, 'fstips23', 33)" onmouseover="showTip(event, 'fstips23', 33)" class="i">Zero</span><a target="_blank" class="fssniplink" href="http://tomasp.net/fswebsnippets">F# Web Snippets</a>
</pre>


<!-- HTML code for ToolTips -->
<div class="tip" id="fstips1">val Bind : (Async&lt;'a&gt; * ('a -&gt; Async&lt;'b&gt;) -&gt; Async&lt;'b&gt;)<br /><br />Full name: Async2.Bind<br /></div>
<div class="tip" id="fstips2">val async : AsyncBuilder<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.async<br /></div>
<div class="tip" id="fstips3">member AsyncBuilder.Bind : computation:Async&lt;'T&gt; * binder:('T -&gt; Async&lt;'U&gt;) -&gt; Async&lt;'U&gt;<br /></div>
<div class="tip" id="fstips4">val Combine : (Async&lt;unit&gt; * Async&lt;'a&gt; -&gt; Async&lt;'a&gt;)<br /><br />Full name: Async2.Combine<br /></div>
<div class="tip" id="fstips5">member AsyncBuilder.Combine : computation1:Async&lt;unit&gt; * computation2:Async&lt;'T&gt; -&gt; Async&lt;'T&gt;<br /></div>
<div class="tip" id="fstips6">val Delay : ((unit -&gt; Async&lt;'a&gt;) -&gt; Async&lt;'a&gt;)<br /><br />Full name: Async2.Delay<br /></div>
<div class="tip" id="fstips7">member AsyncBuilder.Delay : generator:(unit -&gt; Async&lt;'T&gt;) -&gt; Async&lt;'T&gt;<br /></div>
<div class="tip" id="fstips8">val For : (seq&lt;'a&gt; * ('a -&gt; Async&lt;unit&gt;) -&gt; Async&lt;unit&gt;)<br /><br />Full name: Async2.For<br /></div>
<div class="tip" id="fstips9">member AsyncBuilder.For : sequence:seq&lt;'T&gt; * body:('T -&gt; Async&lt;unit&gt;) -&gt; Async&lt;unit&gt;<br /></div>
<div class="tip" id="fstips10">val Return : ('a -&gt; Async&lt;'a&gt;)<br /><br />Full name: Async2.Return<br /></div>
<div class="tip" id="fstips11">member AsyncBuilder.Return : value:'T -&gt; Async&lt;'T&gt;<br /></div>
<div class="tip" id="fstips12">val ReturnFrom : (Async&lt;'a&gt; -&gt; Async&lt;'a&gt;)<br /><br />Full name: Async2.ReturnFrom<br /></div>
<div class="tip" id="fstips13">member AsyncBuilder.ReturnFrom : computation:Async&lt;'T&gt; -&gt; Async&lt;'T&gt;<br /></div>
<div class="tip" id="fstips14">val TryFinally : (Async&lt;'a&gt; * (unit -&gt; unit) -&gt; Async&lt;'a&gt;)<br /><br />Full name: Async2.TryFinally<br /></div>
<div class="tip" id="fstips15">member AsyncBuilder.TryFinally : computation:Async&lt;'T&gt; * compensation:(unit -&gt; unit) -&gt; Async&lt;'T&gt;<br /></div>
<div class="tip" id="fstips16">val TryWith : (Async&lt;'a&gt; * (exn -&gt; Async&lt;'a&gt;) -&gt; Async&lt;'a&gt;)<br /><br />Full name: Async2.TryWith<br /></div>
<div class="tip" id="fstips17">member AsyncBuilder.TryWith : computation:Async&lt;'T&gt; * catchHandler:(exn -&gt; Async&lt;'T&gt;) -&gt; Async&lt;'T&gt;<br /></div>
<div class="tip" id="fstips18">val Using : ('a * ('a -&gt; Async&lt;'b&gt;) -&gt; Async&lt;'b&gt;) (requires 'a :&gt; System.IDisposable)<br /><br />Full name: Async2.Using<br /></div>
<div class="tip" id="fstips19">member AsyncBuilder.Using : resource:'T * binder:('T -&gt; Async&lt;'U&gt;) -&gt; Async&lt;'U&gt; (requires 'T :&gt; System.IDisposable)<br /></div>
<div class="tip" id="fstips20">val While : ((unit -&gt; bool) * Async&lt;unit&gt; -&gt; Async&lt;unit&gt;)<br /><br />Full name: Async2.While<br /></div>
<div class="tip" id="fstips21">member AsyncBuilder.While : guard:(unit -&gt; bool) * computation:Async&lt;unit&gt; -&gt; Async&lt;unit&gt;<br /></div>
<div class="tip" id="fstips22">val Zero : (unit -&gt; Async&lt;unit&gt;)<br /><br />Full name: Async2.Zero<br /></div>
<div class="tip" id="fstips23">member AsyncBuilder.Zero : unit -&gt; Async&lt;unit&gt;<br /></div>
</body></html>
