<!DOCTYPE html>
<html>
<head>
  <title>Presentation</title>
  <base href="/presentations/FS-Patterns-2/"/>
  <meta charset='utf-8'>
  <script src="./Scripts/jquery-1.5.1.js"></script>
  <script src='./Content/fssnip/tips.js'></script>
  <script src='./Scripts/slides.js'></script>
  <link href="./Content/fssnip/style.css" rel="stylesheet" type="text/css" />
  <style>
    body.hidden {
      display: none;
    }
    .no-margin {
      margin: 0px;
    }
    .top-margin {
      margin: 0px;
      margin-top: 10px;
    }
    .note {
      border: 1px solid black;
      background-color: #ffffcc;
      color: Green;
      padding: 5px;
      font-size: 15pt;
    }
    .no-padding {
      padding: 0px;
    }
    .debug {
      border: 1px solid green;
    }
    .left {
      text-align: left;
    }
    .center {
      text-align: center;
    }
    pre {
      font-weight: bold;
    }
    .slides > article span.code {
      white-space: pre;
      font-size: 10pt;
      line-height: normal;
      letter-spacing: normal;
    }
  </style>
</head>
<body class="hidden">
  <section class='slides layout-regular'>
    
<article class="center">
  <div>
    <h1>
      Design Patterns in F#</h1>
    <p>
      Steve Goguen</p>
  </div>
</article>



<article class="smaller">
  <h3>
    Who am I?</h3>
  <ul>
    <li>Not an F# expert</li>
    <li>Web developer - Actually enjoy it</li>
    <li>Silver bullet hunter</li>
    <li>
      <p>
        Convinced mutating state is the root of all evil.
        <br />
        <br />
      </p>
      <h3>
        Contact Info</h3>
    </li>
    <li>
      <p>
        Website: <a href="http://sgoguen.github.io/">http://sgoguen.github.io/</a></p>
    </li>
    <li>Twitter: <a href="http://twitter.com/#!/sgoguen">sgoguen</a></li>
    <li>Google+ &amp; Email: <a href="">sgoguen@gmail.com</a></li>
    <!--<li>Bookmarks: <a href="http://www.delicious.com/sgoguen">delicious.com/sgoguen</a></li>-->
  </ul>
</article>

<article class="smaller">
  <div>
    <h4>
      Design Patterns</h4>
    <ul>
      <li>A general reusable solution to a commonly occurring problem</li>
      <li>Not a finished design that can be transformed directly into code</li>
      <li>Description or template for how to solve a problem that can be used in many different
        situations</li>
    </ul>
    <p class="note">
      Peter Norvig <a href="http://norvig.com/design-patterns/">noted</a> that many of
      the 23 design patterns were significantly simplified or eliminated with higher level
      languages.
    </p>
  </div>
</article>

<article class="smaller">
  <div>
    <small><q>…if thought corrupts language, language can also corrupt thought.</q></small>
    <div class='author'>
      George Orwell</div>
  </div>
</article>


<article class="smaller">
  <div class="center">
    <div>
      <img src="./images/orwell.png" /></div>
    <br />
    <div>
      Does it really?</div>
  </div>
</article>


<article class="smaller">
  <div>
    <h3>
      Read All Files From a Folder</h3>
    <div>
      Comparing Apples to Oranges</div>
    <p>
      Functional F#</p>
    <pre class="fssnip">
<span class="k">let</span> <span title="val ReadFolder : (string -&gt; string [])"
  class="i">ReadFolder</span> <span class="o">=</span> <span title="string -&gt; string[]"><span
    class="i">Directory</span><span class="o">.</span><span class="i">GetFiles</span></span> <span
      title="('a -> 'b) -> ('b -> 'c) -> 'a -> 'c" class="o">&gt;&gt;</span> <span title="('T -&gt; 'U) -&gt; 'T [] -&gt; 'U []"><span
        class="i">Array</span><span class="o">.</span><span class="i">map</span></span> <span
          title="string -> string"><span class="i">File</span><span class="o">.</span><span
            onmouseout="hideTip(event, 'fstips9', 9)" onmouseover="showTip(event, 'fstips9', 9)"
            class="i">ReadAllText</span></span>
</pre>
    <p>
      Imperative C#</p>
    <pre class="csh top-margin">
string[] ReadFolder(string path) {
  var filenames = Directory.GetFiles(path);
  var results = new string[filenames.Length];
  for(var i = 0; i < results.Length; i++) {
    var filename = filenames[i];
    var text = File.ReadAllText(filename);
    results[i] = text;
  }
  return results;
}
</pre>
    <p>
      <i>Could ceremony and painstaking attention to the details corrupt your thinking and
        distract you from solving your problem?</i></p>
  </div>
</article>


<article class="smaller">
  <div>
    <h3>
      Read All Files From a Folder</h3>
    <div>
      A Better Comparison</div>
    <p>
      Functional C#</p>
    <pre class="csh top-margin">
string[] ReadFolder(string path) {
  return Directory.GetFiles(path).Select(f => File.ReadAllText(f)).ToArray();
}
</pre>
    <p>
      Functional F#</p>
    <pre class="fssnip top-margin">
<span class="k">let</span> <span title="val ReadFolder : (string -&gt; string [])"
  class="i">ReadFolder</span> <span class="o">=</span> <span title="string -&gt; string[]"><span
    class="i">Directory</span><span class="o">.</span><span class="i">GetFiles</span></span> <span
      title="('a -> 'b) -> ('b -> 'c) -> 'a -> 'c" class="o">&gt;&gt;</span> <span title="('T -&gt; 'U) -&gt; 'T [] -&gt; 'U []"><span
        class="i">Array</span><span class="o">.</span><span class="i">map</span></span> <span
          title="string -> string"><span class="i">File</span><span class="o">.</span><span
            onmouseout="hideTip(event, 'fstips9', 9)" onmouseover="showTip(event, 'fstips9', 9)"
            class="i">ReadAllText</span></span>
</pre>
  </div>
</article>


<article class="smaller">
  <div>
    <h3>
      Read All Files From a Folder</h3>
    <div>
      A Better Comparison</div>
    <p>
      Functional C# with LINQ</p>
    <pre class="csh top-margin">
string[] ReadFolder(string path) {
  return (from f in Directory.GetFiles(path)
          select File.ReadAllText(f)).ToArray();
}
</pre>
    <p>
      Functional F#</p>
    <pre class="fssnip top-margin">
<span class="k">let</span> <span title="val ReadFolder : (string -&gt; string [])"
  class="i">ReadFolder</span> <span class="o">=</span> <span title="string -&gt; string[]"><span
    class="i">Directory</span><span class="o">.</span><span class="i">GetFiles</span></span> <span
      title="('a -> 'b) -> ('b -> 'c) -> 'a -> 'c" class="o">&gt;&gt;</span> <span title="('T -&gt; 'U) -&gt; 'T [] -&gt; 'U []"><span
        class="i">Array</span><span class="o">.</span><span class="i">map</span></span> <span
          title="string -> string"><span class="i">File</span><span class="o">.</span><span
            onmouseout="hideTip(event, 'fstips9', 9)" onmouseover="showTip(event, 'fstips9', 9)"
            class="i">ReadAllText</span></span>
</pre>
  </div>
</article>





<article class="smaller">
  <div>
    <h3>
      The F# Version - Looking under the hood</h3>

    <iframe src="./Content/snips/read-folder-defined.htm" style="width: 100%"></iframe>
  </div>
</article>
    
    <article class="smaller">
      <div class="center">
        <h3>
          Let's Talk About Patterns and Names
        </h3>
        <br />
        <div>
          <img src="./images/color-test.png" />
        </div>
        <br />
        <div>
          ...but first, which square is a different color?
        </div>
        <p>
          One is clearly dumbu and the others are borou.
        </p>
      </div>
    </article>

    <article class="smaller">
      <div class="center">
        <div>
          <img src="./images/color-test2.png" />
        </div>
        <br />
        <div>
          Don't feel too bad, this test stumps the Himba people.
        </div>
      </div>
    </article>

    <article class="smaller">
      <div class="center">
        <div>
          <img src="./images/english-colors.png" height="20%" width="60%" />
        </div>
        <div>
          <img src="./images/himba-colors.png" height="20%" width="60%" />
        </div>
        <p>
          Do names define rigid mental boundaries?
        </p>
      </div>
    </article>
    
    <article class="smaller">
      <div class="center">
        <h3>One Theory</h3>
        <img src="./images/on-intelligence.png" width="40%">
      </div>

    </article>    
    
    <article class="smaller">
      <div class="center">
        <h3>
          Let's train our brains to distort our vision
        </h3>
        <br />
        <div>
          <img src="./images/movingspiral.gif" height="80%" />
        </div>
      </div>
    </article>    

    <article class="smaller">
      <div class="center">
        <h3>
          Hierarchical Temporal Memory
        </h3>
        <br />
        <div>
          <img src="./images/htm.jpg" width="100%" />
        </div>
      </div>
    </article>
    
    <article>
      <h1 class="center">Design Patterns and Names</h1>
    </article>

    <article class="smaller">
      <div class="center">
        <h3>
          Do these names distort our perspective?
        </h3>
        <table>
          <tr>
            <td>
              <ul style="text-align: left">
                <li title="'a -> 'b">Factory Method</li>
                <li title="'a -> 'b">Interpreter</li>
                <li title="'a -> 'b">Adaptor</li>
                <li title="unit -> 'a">Singleton</li>
                <li title="unit -> 'a">Lazy Initialization</li>
                <li title="'a -> unit -> 'a">Prototype</li>
                <li title="('a -> 'b) * ('c -> 'd)">Abstract Factory</li>
                <li title="string -> 'a">Multiton</li>
                <li title="'a -> 'b -> 'b">Decorator</li>
                <li title="'a -> 'b -> 'c">Builder</li>
                <li title="'a list -> 'a">Composite</li>
              </ul>
            </td>
            <td>
              <ul style="text-align: left">
                <li title="('a * 'b) -> 'c">Façade</li>
                <li title="(list<'a -> ('b + unit))> -> 'a -> ('b + unit)">Chain of Responsibility</li>
                <li title="'a -> unit">Command</li>
                <li>Front Controller</li>
                <li>Flyweight</li>
                <li>Proxy</li>
                <li>Blackboard</li>
                <li title="(('a + unit) * (unit -> μ))">Iterator</li>
              </ul>
            </td>
            <td>
              <ul style="text-align: left">
                <li>Mediator</li>
                <li>Memento</li>
                <li>Null Object</li>
                <li title="list<'a -> unit> -> 'a -> unit">Observer</li>
                <li>Servant</li>
                <li title="'a -> bool">Specification</li>
                <li title="'a -> ">State</li>
                <li title="('a -> 'b) -> ('a -> 'b)">Strategy</li>
                <li>Template Method</li>
                <li>Visitor</li>
              </ul>
            </td>
          </tr>
        </table>
      </div>
    </article>

    <article>
      <h3>The Factory Pattern</h3>
      <blockquote style="font-size: inherit; line-height: inherit">
        In class-based programming, the factory method pattern is a creational 
        pattern which uses factory methods to deal with the problem of creating 
        objects without specifying the exact class of object that will be 
        created. This is done by creating objects via calling a factory 
        method—either specified in an interface and implemented by child 
        classes, or implemented in a base class and optionally overridden by 
        derived classes—rather than by calling a constructor.
      </blockquote>
      <p>
        <b>Note the language used to describe the pattern.</b>
      </p>
    </article>
    
    <article>
      <h3>The Factory Pattern - How about a UML Diagram?</h3>
      <p>
        <img src="http://upload.wikimedia.org/wikipedia/commons/thumb/a/a3/FactoryMethod.svg/600px-FactoryMethod.svg.png" />
      </p>
    </article>
    
    <article class="smaller">
      <div>
        <h3>
          The Factory Pattern - In C#
        </h3>
        <q class="top-margin" style="margin-top: 15px;">
          Define an interface for creating an
          object, but let the subclasses decide which class to instantiate. The Factory method
          lets a class defer instantiation to subclasses.
        </q>
        <h3 style="margin-top: 50px;">
          Step 1: Define our interfaces
        </h3>
        <pre class="csh top-margin">
interface IEmployee {
  string Name { get; }
  decimal GetCheckAmount();
}
interface IEmployeeFactory {
  IEmployee Create(string name, string position);
}
</pre>
      </div>
    </article>

    <article class="smaller">
      <div>
        <h3>
          The Factory Pattern - Step 2: Implement IEmployee
        </h3>
        <pre class="csh">
public class SalariedEmployee : IEmployee {
  //  Our private fields to store our values
  private string name;
  private decimal yearlySalary;
  
  // Constructor
  internal SalariedEmployee (string name, decimal yearlySalary) {
    this.name = name;
    this.yearlySalary = yearlySalary;
  }
  // Readonly Name property
  string IEmployee.Name {
    get { return name; }
  }
  // Function to calculate a check amount
  decimal IEmployee.GetCheckAmount() {
    return yearlySalary / 52;
  }
}
</pre>
      </div>
    </article>

    <article class="smaller">
      <div>
        <h3>
          The Factory Pattern - Step 3: Implement a Factory
        </h3>
        <p>
          Create a class implementing IEmployeeFactory
        </p>
        <pre class="csh top-margin">
public class SalariedEmployeeFactory : IEmployeeFactory {
  public IEmployee Create(string name, string position) {
    if(position == "boss")
      return new SalariedEmployee(name, 300000);
    return new SalariedEmployee(name, 40000);
  }
}
</pre>
        <h3 class="top-margin">
          Step 4: Try out our new factory
        </h3>
        <pre class="csh top-margin">
public class FactoryExamples {
  public void Example1() {
    IEmployeeFactory f = new SalariedEmployeeFactory();
    IEmployee[] Employees = new IEmployee[] {
      f.Create("Larry", "stooge"),
      f.Create("Curly", "stooge"),
      f.Create("Moe", "boss")
    };
  }
}
</pre>
        <p class="center">
          All that code just to create some lousy objects??? Really???
        </p>
      </div>
    </article>

    <article class="smaller">
      <div>
        <h3>
          Factories in F#
        </h3>
        <p>
          Step 1: Define the Employee interface (The factory will just be a function)
        </p>
        <pre class="fsh top-margin">
type IEmployee =
  abstract member Name: string
  abstract member GetCheckAmount: unit -> decimal
</pre>
        <p>
          Step 2: Create a function returning an object implementing IEmployee
        </p>
        <pre class="fsh top-margin">
let createSalaryEmployee(name,position) = 
  let yearlySalary = if position = "boss" then 300000.0m else 40000.0m
  { new IEmployee with
    member this.Name = name
    member this.GetCheckAmount() = yearlySalary / 52.0m }
</pre>
        <p>
          Step 3: Try out our constructor
        </p>
        <pre class="fsh top-margin">
//  Let's try this out
let employee = createSalaryEmployee
let employees = [
  employee("Larry", "stooge") 
  employee("Curly", "stooge")
  employee("Moe", "boss")
]
</pre>
      </div>
    </article>

    <article>
      <h3>Take Aways</h3>
      <ul>
        <li>When functions are first class types, constructors are simply swappable
            functions</li>
        <li>If you're creating a class with a single method, like a factory, 
          create a function instead</li>
        <li>All functions of the same type are polymorphic with all other functions 
          of the same type</li>
        <li>Object expressions are a convenient way to implement interfaces
            on the fly</li>
      </ul>
    </article>
    <article class="smaller">
      <div>
        <h3>
          The Singleton Pattern
        </h3>
        <p>
          C# Version
        </p>
        <pre class="csh top-margin">
class A {
  public private A() {}
  private static A instance = new A();
  public static A Instance() {
    return 
  }
  public void Action() {
    Console.Write("action");
  }
}
</pre>
        <p>
          <a href="http://fssnip.net/7p">Tao Liu's Version</a>
        </p>
        <pre class="fsh top-margin">
type A private () =
    static let instance = A()
    static member Instance = instance
    member this.Action() = printfn "action"
let DesignPattern1() = 
    let a = A.Instance;
    a.Action()
</pre>
      </div>
    </article>
    ;

    <article class="smaller">
      <div>
        <h3>
          The Functional Singleton
        </h3>
        <table border="0">
          <tr>
            <th width="50%">
              F#
            </th>
            <th>
              C#
            </th>
          </tr>
          <tr>
            <td>
            <pre class="fsh">
let makeSingleton f =
  let instance = lazy f()
  fun () -> instance.Value
</pre>
            <td>
              <pre class="csh">
Func&lt;A&gt; makeSingleton&lt;A&gt;(Func&lt;A&gt; f) {
  var instance = f();
  return () =&gt; instance;
}
</pre>
            </td>
          </tr>
        </table>
        <ul>
          <li>Constructors are just functions</li>
          <li>Singletons are just constructors that return the same instance</li>
          <li>
            Using first class functions, closures and higher ordered types there's no need
            to repeat this pattern throughout your code.
          </li>
        </ul>
        <p class="note">
          Let's try it out!
        </p>
      </div>
    </article>

    <article class="smaller">
      <div>
        <h3>
          The Decorator Pattern
        </h3>
        <p>
          Attach additional responsibilities to an object dynamically keeping the same interface.
          Decorators provide a flexible alternative to subclassing for extending functionality.
        </p>
        <pre class="csh">
public interface Coffee {
    public double getCost();
    public String getIngredients();
}
public class SimpleCoffee : Coffee {
    public double getCost() { return 1; }
    public String getIngredients() { return "Coffee"; }
}
public class Milk : Coffee {
    private Coffee decoratedCoffee;
    public Milk(Coffee decoratedCoffee) {
        this.decoratedCoffee = decoratedCoffee;
    } 
    public double getCost() { // overriding methods defined in the abstract superclass
        return decoratedCoffee.getCost() + 0.5;
    }
    public String getIngredients() {
        return decoratedCoffee.getIngredients() + ingredientSeparator + "Milk";
    }
}
</pre>
      </div>
    </article>

    <article class="smaller">
      <div>
        <h3>
          The Decorator Pattern - In F#
        </h3>
        <pre class="fsh top-margin">
type Coffee =
  abstract member getCost: unit -> double
  abstract member getIngredients: unit -> string list
let SimpleCoffee = 
  { new Coffee with 
    member this.getCost() = 1.0
    member this.getIngredients() = ["Coffee"]
  }
let WithMilk(coffee:Coffee) =
  { new Coffee with 
    member this.getCost() = coffee.getCost() + 0.5
    member this.getIngredients() = "milk" :: coffee.getIngredients() }
let WithSyrup (syrup:string) (coffee:Coffee) =
  { new Coffee with 
    member this.getCost() = coffee.getCost() + 0.25
    member this.getIngredients() = syrup :: coffee.getIngredients() }
</pre>
        <p class="top-margin">
          Let's try this out
        </p>
        <pre class="fsh top-margin">
let myCoffee = WithMilk(SimpleCoffee)
</pre>
        <p class="top-margin">
          We could pipe it too
        </p>
        <pre class="fsh top-margin">
let yourCoffee = SimpleCoffee |> WithMilk |> WithSyrup "pumpkin spice"
</pre>
      </div>
    </article>

    <article>
      <h3>Take Aways</h3>
      <ul>
        <li>Decorators are implemented elegantly with object expressions</li>
        <li>The pipeline constructor gives us a nice fluent interface for free</li>
        <li>Partial application make parameterize decorating easy</li>
        <li>The inner object should be always be the last parameter</li>
      </ul>
    </article>

    <article class="smaller">
      <div>
        <h3>
          The Builder Pattern - In C#
        </h3>
        <p>
          Separate the construction of a complex object from its representation allowing the
          same construction process to create various representations.
        </p>
        <pre class="csh">
class CoffeeBuilder {
  protected Coffee coffee;
  public Coffee getCoffee() {
      return coffee;
  }
 
  public void createNewCoffeeProduct() {
    coffee = new SimpleCoffee();
  }
 
  public void addMilk() {
    coffee = new Milk(coffee);
  }
}
</pre>
        <pre class="csh">
// Usage
var builder = new CoffeeBuilder();
builder.createNewCoffeeProduct();
builder.addMilk();
var myCoffee = builder.getCoffee();
</pre>
      </div>
    </article>

    <article class="smaller">
      <div>
        <h3>
          The Builder Pattern - In C# Using Fluent Interface
        </h3>
        <pre class="csh">
class CoffeeBuilder {
  protected Coffee coffee;
  public Coffee getCoffee() {
      return coffee;
  }
 
  public CoffeeBuilder createNewCoffeeProduct() {
    coffee = new SimpleCoffee();
    return this;
  }
 
  public CoffeeBuilder addMilk() {
    coffee = new Milk(coffee);
    return this;
  }
}
</pre>
        <pre class="csh">
// Usage
var myCoffee = new CoffeeBuilder()
  .createNewCoffeeProduct().addMilk().getCoffee();
</pre>
      </div>
    </article>

    <article class="smaller">
      <div>
        <h3>
          The Builder Pattern - In F# Using Fluent Interfaces
        </h3>
        <p>
          Define our fluent builder
        </p>
        <pre class="fsh top-margin">
type CoffeeBuilder(coffee:Coffee) = 
  new() = CoffeeBuilder(SimpleCoffee)
  member this.addMilk() = CoffeeBuilder(Milk(coffee))
  member this.getCoffee() = coffee
</pre>
        <p>
          Use it
        </p>
        <pre class="fsh top-margin">
let builder = new CoffeeBuilder()
let myCoffee = builder.addMilk().getCoffee()
</pre>
      </div>
    </article>

    <article class="smaller">
      <div>
        <h3>
          The Builder Pattern - In F#
        </h3>
        <p>
          Why create a fluent interface when you can just pipe constructors?
        </p>
        <pre class="fsh top-margin">
let myCoffee = SimpleCoffee |> Milk
</pre>
        <p>
          Do F# Sequences use the Builder Pattern?
        </p>
        <pre class="fsh top-margin">
let myFunctions =
  let path = @"C:\Project"
  Directory.EnumerateFiles(path, "*.vb", SearchOption.AllDirectories)
  |> Seq.map File.ReadAllText
  |> Seq.collect (fun text -> Regex.Matches(text, "Function \w+\([^)]*\)") |> Seq.cast
<match> )
  |> Seq.map (fun m -> m.Value)
  |> Seq.take 10  
</pre>
      </div>
    </article>
    
    <article>
      <h3>Composites</h3>
      <pre class="fsh top-margin smaller">
type Shape =
  abstract Draw: unit -> DrawingInstructions list
  abstract HitTest: Point -> bool
</pre>
      <pre class="fsh top-margin smaller">
let line (p1:Point) (p2:Point) = 
    { new Shape with
      member this.Draw() = [Line(p1, p2)]
      member this.HitTest(point) = true
    }
</pre>
<pre class="fsh top-margin smaller">
let compositeShape (shapes:Shape list) = 
  { new Shape with 
    member this.Draw() = 
      [ for shape in shapes do 
          for instr in shape.Draw() do
            yield instr ]
    member this.HitTest(point) = 
      shapes |> List.exists(fun shape -> shape.HitTest(point)) }
</pre>

    </article>

    <article class="smaller">
      <div>
        <h3>Patterns Implemented Elegantly with Object Expressions</h3>
        <table>
          <tr>
            <th>
              Pattern Name
            </th>
            <th width="37%">
              Correlating Type?
            </th>
          </tr>
          <tr>
            <td>
              <b>Singleton</b> - Ensure a class has only one instance, and provide a global point
              of access to it.
            </td>
            <td>
              <code>() -> 'a</code>
            </td>
          </tr>
          <tr>
            <td>
              <b>Lazy Initialization</b> - Delay creating an until the first time it's needed
            </td>
            <td>
              <code>() -> 'a</code>
            </td>
          </tr>
          <tr>
            <td>
              <b>Multiton</b> - Ensure a class has only named instances, and provide global point
              of access to them
            </td>
            <td>
              <code>string -> 'a</code>
            </td>
          </tr>
          <tr>
            <td><b>Factory Method</b></td>
            <td>
              <code>'a -> 'b</code>
            </td>
          </tr>
          <tr>
            <td>
              <b>Adaptor</b> - Convert the interface of a class into another interface clients
              expect.
            </td>
            <td>
              <code>'a -> 'b</code>
            </td>
          </tr>
          <tr>
            <td>
              <b>Decorator</b> - Attach additional responsibilities to an object dynamically keeping the same interface.
            </td>
            <td>
              <code>'b -> 'a -> 'a</code>
            </td>
          </tr>
          <tr>
            <td>
              <b>Prototype</b> - Specify the kinds of objects to create using a prototypical instance,
              and create new objects by copying this prototype
            </td>
            <td>
              <code>'a -> () -> 'a</code>
            </td>
          </tr>
          <tr>
            <td>
              <b>Composite</b> - Treat a list of objects as a single object
            </td>
            <td>
              <code>('a list -> 'a)</code>
            </td>
          </tr>
        </table>
      </div>
    </article>

    <article class="small">
      <h3>Should we use metaphorical names for type signatures?</h3>
      <table>
        <tr><th>Action</th><td>() &rarr; ()</td></tr>
        <tr><th>Source</th><td>() &rarr; a</td></tr>
        <tr><th>Sinks</th><td>a &rarr; ()</td></tr>
        <tr><th>Function</th><td>a &rarr; b</td></tr>
        <tr><th>Predicate</th><td>a &rarr; bool</td></tr>
        <tr><th>Picker</th><td>a &rarr; Option&lt;b&gt;</td></tr>
        <tr><th>Lifter</th><td>a &rarr; M&lt;a&gt;</td></tr>
        <tr><th>Combiner</th><td>a &rarr; b &rarr; c</td></tr>
        <tr><th>Folder</th><td>a &rarr; b &rarr; a</td></tr>
      </table>
      <ul>
        <li>Don't these patterns already have canonical names?</li>
      </ul>
    </article>

    <article>
      <h1>Patterns Implemented Elegantly with Union Types and Pattern Matching</h1>
    </article>

    <article class="smaller">
      <h3>Patterns Implemented Elegantly with Union Types and Pattern Matching</h3>
      <table>
        <tr><th>Pattern</th><th>Description</th></tr>
        <tr>
          <th>Visitor Pattern</th>
          <td>Represent an operation to be performed on the elements of an object structure. </td>
        </tr>
        <tr>
          <th>Interpreter Pattern</th>
          <td>Given a language, define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language. </td>
        </tr>
        <tr>
          <th>Specification Pattern</th>
          <td>Recombinable business logic in a Boolean fashion</td>
        </tr>
      </table>
    </article>


    <article class="">
    <div>
      <h3>Defining and Visiting a Simple AST</h3>
      <iframe src="./Content/snips/interpreter-1.htm" style="width: 100%"></iframe>
    </div>
  </article>

    
    <article>
      <h3>
        The Visitor Pattern
      </h3>
      <p>
        We require two interfaces.  The first forces us to implement visit
        methods for all node types.  The second so each node can accept a visitor.
      </p>
      <pre class="csh">
interface IExprVisitor {
    void visit(AddExpr addExpr);
    void visit(ValueExpr valueExpr);
}

</pre>

      <pre class="csh">
interface IExpr {
  	void accept(IExprVisitor visitor);
}
</pre>
    </article>
    
    <article>
      <h3>Implementing an Accepting Node</h3>
      <pre class="csh">
class AddExpr : IExpr {
  public IExpr left;
  public IExpr right;
  public AddExpr(IExpr left, IExpr right) {
    this.left = left;
    this.right = right;
  }
  public void accept(IExprVisitor visitor) {
    visitor.visit(this);
  }
}
</pre>
    </article>
    
    <article>
      <h3>Now Let's Create a Printing Visitor</h3>
      <pre class="csh">
class PrintingVisitor : IExprVisitor {
  StringBuilder sb = new StringBuilder();
  public void visit(AddExpr addExpr) {
    sb.Append("(");
    addExpr.left.accept(this);
    sb.Append(" + ");
    addExpr.right.accept(this);
    sb.Append(")");
  }
  public void visit(ValueExpr valueExpr) {
    sb.Append(valueExpr.value);
  }
  public string ToString() {
    return sb.ToString();
  }
}
</pre>      
    </article>
    
    <article>
      <h3>...and finally a simple Print function</h3>
      <pre class="csh">
string Print(IExpr expr) {
  var printer = new PrintingVisitor();
  expr.accept(printer);
  return printer.ToString();
}
</pre>
    </article>
    
    <article class="">
  <div>
    <h3>Shall We Implement an Interpreter Too?</h3>
    <iframe src="./Content/snips/interpreter-3.htm" style="width: 100%"></iframe>
  </div>
</article>


    <article class="smaller">
      <div>
        <h3>How about a universal language?</h3>

        <pre class="fsh top-margin" style="margin: 1em 0em 1em 0em">
type var = string
type term = 
  | Variable of var
  | Abstraction of var * term
  | Application of term * term
</pre>

        <h3>Examples</h3>
        <pre class="fsh top-margin" style="margin: 1em 0em 1em 0em">
// ID := λx.x
// TRUE := λx.λy.x
// FALSE := λx.λy.y
// AND := λp.λq.p q p
let Id = Abstraction("x", Variable("x"))
let True = Abstraction("x", Abstraction("y", Variable("x")))
let False = Abstraction("x", Abstraction("y", Variable("y")))
let And = Abstraction("p", Abstraction("q", 
    Application( Application( Variable("p", Variable("q")), Variable("p"))))
</pre>

      </div>
    </article>

    <article class="smaller">
      <h3>An Untyped Language that's a Closed System</h3>
      <p>You can apply any function to any other function - It just might not ever stop</p>
      <table>
        <tr><td>I or ID</td><td>λa.a</td></tr>
        <tr><td>K</td><td>λa.λb.a</td></tr>
        <tr><td>S</td><td>λa.λb.λc.a c (b c)</td></tr>
      </table>
      <table>
        <tr><td>TRUE</td><td>λa.λb.a</td></tr>
        <tr><td>FALSE</td><td>λa.λb.b</td></tr>
        <tr><td>0</td><td>λa.λb.b</td></tr>
        <tr><td>1</td><td>λa.λb.a b</td></tr>
        <tr><td>2</td><td>λa.λb.a (a b)</td></tr>
        <tr><td>POW</td><td>λa.λb.b a</td></tr>
        <tr><td>AND</td><td>λa.λb.a b a</td></tr>
        <tr><td>OR</td><td>λa.λb.a a b</td></tr>

      </table>
      <p class="center">A good closed system can be universally powerful and insightful</p>
    </article>
    
    <article>
      <h3>Symbolically Evaluating Pure Lambda Calculus</h3>
      <table>
        <tr><td>ID</td><td>λx.x</td></tr>
        <tr><td>TRUE</td><td>λx.λy.x</td></tr>
        <tr><td>FALSE</td><td>λx.λy.y</td></tr>
        <tr><td>AND</td><td>λp.λq.p q p</td></tr>
      </table>
      <p>Let's partially evaluate And(True)</p>
      <table>
        <tr><td>1. (<b>λp</b>.λq.<b>p</b> q <b>p</b>)(λx.λy.x)</td></tr>
        <tr><td>2. (<del>λp.</del>λq.(<b>λx</b>.λy.<b>x</b>) q (λx.λy.x))</td></tr>
        <tr><td>3. (λq.(<del>λx</del>.<b>λy</b>.q) (λx.λy.x))</td></tr>
        <tr><td>4. (λq.q)</td></tr>
      </table>
    </article>
    
    <article class="smaller">
      <h3>Converting F# to Pure Lambda Calculus</h3>
      <pre class="fsh top-margin">
let rec toLambda (e:Microsoft.FSharp.Quotations.Expr) =
  match e with
  | Patterns.Lambda(v, e) -> Lambda(v.Name, toLambda e)
  | Patterns.Application(left, right) -> App(toLambda left, toLambda right)
  | Patterns.Var(var) -> Var(var.Name)
  | e -> 
    let typeName = e.Type.ToString()
    raise (System.Exception(sprintf "Cannot convert %s to lambda" typeName))
</pre>
      <p>
        Examples:
        <pre class="fsh top-margin">
let FsTrue = &lt;@@ fun x y -> x @@&gt; |> toLambda
let FsFalse = &lt;@@ fun x y -> y @@&gt; |> toLambda
let FsAnd = &lt;@@ fun p q -> p q p @@&gt; |> toLambda
</pre>
      </p>

      <p>Actually...  FsAnd will not compile because the Damas-Hindley-Milner type
      system cannot infer the type.</p>
    </article>

    <article class="smaller">
      <h3>Modifying our Translator to Support FsAnd</h3>
      <pre class="fsh top-margin">
type Fn = delegate of Fn -> Fn
</pre>
<p>Note the recursive type above defined as a <b>delegate</b></p>      
<pre class="fsh top-margin">
let rec toLambda (e:Microsoft.FSharp.Quotations.Expr) =
match e with
| Patterns.Lambda(v, e) -> Lambda(v.Name, toLambda e)
  | Patterns.Application(left, right) -> App(toLambda left, toLambda right)
  | Patterns.Var(var) -> Var(var.Name)
  | Patterns.Call(Some(left), methodInfo, [right]) 
      when methodInfo.Name = "Invoke" -> App(toLambda left, toLambda right)
  | e -> 
    let typeName = e.Type.ToString()
    raise (System.Exception(sprintf "Cannot convert %s to lambda" typeName))
</pre>
      <p>
        Examples:
        <pre class="fsh top-margin">
let FsTrue = &lt;@@ fun x y -> x @@&gt; |> toLambda
let FsFalse = &lt;@@ fun x y -> y @@&gt; |> toLambda
let FsAnd = &lt;@@ fun (p:fn) (q:fn) -> p.Invoke(q).Invoke(p) @@&gt; |> toLambda
</pre>
      </p>
    </article>
    
    <article class="smaller">
      <h3>Working Towards an Evaluator</h3>
      <p>We need to be able to substitute variables with expressions</p>
      <pre class="fsh">
let rec substitute (varName:var) (withExpr:term) (expr:term) =
    let doSubRec = substitute varName withExpr 
    match expr with
    | Var(name) when varName = name -> withExpr
    | App(left, right) -> App(doSubRec left, doSubRec right)
    | Lambda(var, body) when var <> varName -> 
        Lambda(var, doSubRec body)
    | x -> x
</pre>
      <p>Let's start by with evaluating a single step before we tackle the larger problem</p>
<pre class="fsh">
let rec evalStep expr = 
  match expr with
  | App(Lambda(var, expr), right) -> substitute var right expr
  | App(left, right) -> App(evalStep left, evalStep right)
  | Lambda(var, body) -> Lambda(var, evalStep body)
  | x -> x

</pre>
    </article>
    
    <article class="smaller">
      <h3>Evaluating Multiple Steps</h3>
      <div>Let's evaluate multiple steps</div>
      <pre class="fsh">let rec eval (maxSteps:int) (term:term) =
  seq {
    yield term
    let last = ref term
    let next = ref (evalStep term)
    while next.Value <> last.Value do
      yield next.Value
      last := next.Value
      next := evalStep next.Value
  } |> Seq.truncate maxSteps |> Seq.toList
</pre>
      
      <div>A utility to print</div>
      <pre class="fsh">
let printEval max term =
  let steps = term |> eval max
  for step in steps do
    printfn "%s" (ToString step)
  let last = steps |> List.rev |> List.head
  last
</pre>
      
    </article>
    

    <article>
      <h1>Implementing Patterns for DSLs</h1>
    </article>

<article class="">
  <div>
    <h3>
      Aync Builder</h3>
    <iframe src="./Content/snips/async1.htm" style="width: 100%"></iframe>
  </div>
</article>


<article class="">
  <div>
    <h3>
      What Builders are Made of...</h3>
    <iframe src="./Content/snips/async2.htm" style="width: 100%"></iframe>
  </div>
</article>
    
    <article class="smaller">
      <h3>Computation Expression Building Blocks</h3>
      <table>
        <tr><th>Zero</th><td>() &rarr; M a</td></tr>
        <tr><th>Return</th><td>a &rarr; M a</td></tr>
        <tr><th>Yield</th><td>a &rarr; M a</td></tr>
        <tr><th>ReturnFrom</th><td>M a &rarr; M a</td></tr>
        <tr><th>YieldFrom</th><td>M a &rarr; M a</td></tr>
        <tr><th>Delay</th><td>() &rarr; M a &rarr; M a</td></tr>
        <tr><th>Combine</th><td>M a &rarr; M a &rarr; M a</td></tr>
        <tr><th>Bind</th><td>M a &rarr; (a &rarr; M b) &rarr; M b</td></tr>
        <tr><th>For</th><td>seq a &rarr; (a &rarr; M b) &rarr; M b</td></tr>
        <tr><th>For</th><td>seq a &rarr; (a &rarr; M b) &rarr; seq M b</td></tr>
        <tr><th>While</th><td>(() &rarr; bool) * (M a &rarr; M a)</td></tr>
      </table>
    </article>

    <article class="smaller">
  <div>
    <h3>
      Enumerating All Possible Types</h3>
    <table>
      <tr>
        <td>
          <code>'a</code>
        </td>
        <td>
          A value
        </td>
      </tr>
      <tr>
        <td>
          <code>() -> 'a</code>
        </td>
        <td>
          Function - no args returning a value
        </td>
      </tr>
      <tr>
        <td>
          <code>() -> IO<'a></code>
        </td>
        <td>
          Function returning some input
        </td>
      </tr>
      <tr>
        <td>
          <code>'a -> 'a</code>
        </td>
        <td>
          A pure function returning its own type
        </td>
      </tr>
      <tr>
        <td>
          <code>'a -> 'b</code>
        </td>
        <td>
          A regular function
        </td>
      </tr>
      <tr>
        <td>
          <code>'a * 'b</code>
        </td>
        <td>
          Tuples
        </td>
      </tr>
      <tr>
        <td>
          <code>'a + 'b</code>
        </td>
        <td>
          Discriminated Unions
        </td>
      </tr>
    </table>
    <p class="note">
      This assumes we're talking about pure functions</p>
    <br />
    <h3 class="top-margin">
      How can we account for side-effects in types?</h3>
  </div>
</article>
                       





<article class="smaller">
  <div class="">
    <h3 class="center">
      Abstraction</h3>
    <q>In computing science, more abstract viewpoints are often more useful, because of
      the need to achieve independence from the often overwhelmingly complex details of
      how things are represented or implemented.</q>
    <div class="author">
      Joseph Goguen</div>
  </div>
</article>


<article class="smaller">
  <div class="">
    <h3 class="center">
      Abstraction</h3>
    <ul class="left">
      <li>Things that appear to be different things may in fact have the same abstract structure</li>
      <li>Removing metaphical names and labels helps identify these correlations</li>
      <li>Tools: Category theory, type theory</li>
    </ul>
  </div>
</article>



<article class="smaller">
  <h4>
    Contact Info</h4>
  <ul>
    <li>Website: <a href="www.njgeeks.com">www.njgeeks.com</a></li>
    <li>Twitter: <a href="http://twitter.com/#!/sgoguen">sgoguen</a></li>
    <li>Google+ &amp; Email: <a href="">sgoguen@gmail.com</a></li>
    <li>Bookmarks: <a href="http://www.delicious.com/sgoguen">delicious.com/sgoguen</a></li>
  </ul>
  <h4>
    Free F# Resources</h4>
  <ul>
    <li><a href="http://www.tryfsharp.org/">www.tryfsharp.org</a> - In the Browser with
      Guided Tour</li>
    <li><a href="http://fssnip.net/">FSSnip</a> - F# Snippets Website </li>
    <li><a href="http://en.wikibooks.org/wiki/F_Sharp_Programming">F# Wikibook</a> - Juliet
      Rosenthal's free book</li>
  </ul>
</article>

  </section>
</body>
</html>
