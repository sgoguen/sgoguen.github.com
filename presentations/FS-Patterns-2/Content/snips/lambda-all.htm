<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <link rel="stylesheet" type="text/css" href="style.css" />
  <script type="text/javascript" src="tips.js"></script>
</head>
  <body>
    <pre class="fssnip">
<span class="l">  1: </span><span class="c">//namespace Demo.Lambda</span>
<span class="l">  2: </span>
<span class="l">  3: </span><span class="k">open</span> <span onmouseout="hideTip(event, 'fst1', 1)" onmouseover="showTip(event, 'fst1', 1)" class="i">Microsoft</span><span class="o">.</span><span onmouseout="hideTip(event, 'fst2', 2)" onmouseover="showTip(event, 'fst2', 2)" class="i">FSharp</span><span class="o">.</span><span onmouseout="hideTip(event, 'fst3', 3)" onmouseover="showTip(event, 'fst3', 3)" class="i">Quotations</span>
<span class="l">  4: </span><span class="k">open</span> <span onmouseout="hideTip(event, 'fst1', 4)" onmouseover="showTip(event, 'fst1', 4)" class="i">Microsoft</span><span class="o">.</span><span onmouseout="hideTip(event, 'fst2', 5)" onmouseover="showTip(event, 'fst2', 5)" class="i">FSharp</span><span class="o">.</span><span onmouseout="hideTip(event, 'fst3', 6)" onmouseover="showTip(event, 'fst3', 6)" class="i">Quotations</span><span class="o">.</span><span onmouseout="hideTip(event, 'fst4', 7)" onmouseover="showTip(event, 'fst4', 7)" class="i">Patterns</span>
<span class="l">  5: </span>
<span class="l">  6: </span><span class="k">type</span> <span onmouseout="hideTip(event, 'fst5', 8)" onmouseover="showTip(event, 'fst5', 8)" class="i">var</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fst6', 9)" onmouseover="showTip(event, 'fst6', 9)" class="i">string</span>
<span class="l">  7: </span><span class="k">type</span> <span onmouseout="hideTip(event, 'fst7', 10)" onmouseover="showTip(event, 'fst7', 10)" class="i">term</span> <span class="o">=</span> 
<span class="l">  8: </span>  | <span onmouseout="hideTip(event, 'fst8', 11)" onmouseover="showTip(event, 'fst8', 11)" class="i">Lambda</span> <span class="k">of</span> <span class="i">Variable</span><span class="o">:</span><span onmouseout="hideTip(event, 'fst5', 12)" onmouseover="showTip(event, 'fst5', 12)" class="i">var</span> <span class="o">*</span> <span class="i">Body</span><span class="o">:</span><span onmouseout="hideTip(event, 'fst7', 13)" onmouseover="showTip(event, 'fst7', 13)" class="i">term</span>
<span class="l">  9: </span>  | <span onmouseout="hideTip(event, 'fst9', 14)" onmouseover="showTip(event, 'fst9', 14)" class="i">Var</span> <span class="k">of</span> <span class="i">Variable</span><span class="o">:</span><span onmouseout="hideTip(event, 'fst5', 15)" onmouseover="showTip(event, 'fst5', 15)" class="i">var</span>
<span class="l"> 10: </span>  | <span class="i">App</span> <span class="k">of</span> <span class="i">Left</span><span class="o">:</span><span onmouseout="hideTip(event, 'fst7', 16)" onmouseover="showTip(event, 'fst7', 16)" class="i">term</span> <span class="o">*</span> <span class="i">Right</span><span class="o">:</span><span onmouseout="hideTip(event, 'fst7', 17)" onmouseover="showTip(event, 'fst7', 17)" class="i">term</span>
<span class="l"> 11: </span>
<span class="l"> 12: </span><span class="k">type</span> <span class="i">Fn</span> <span class="o">=</span> <span class="k">delegate</span> <span class="k">of</span> <span class="i">Fn</span> <span class="k">-&gt;</span> <span class="i">Fn</span>
<span class="l"> 13: </span>
<span class="l"> 14: </span><span class="k">module</span> <span onmouseout="hideTip(event, 'fst8', 18)" onmouseover="showTip(event, 'fst8', 18)" class="i">Lambda</span> <span class="o">=</span>
<span class="l"> 15: </span>  <span class="k">let</span> <span class="i">lambdaSymbol</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fst10', 19)" onmouseover="showTip(event, 'fst10', 19)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fst11', 20)" onmouseover="showTip(event, 'fst11', 20)" class="i">Char</span><span class="o">.</span><span onmouseout="hideTip(event, 'fst12', 21)" onmouseover="showTip(event, 'fst12', 21)" class="i">ConvertFromUtf32</span>(<span class="n">0x000003BB</span>)
<span class="l"> 16: </span>  <span class="k">let</span> <span class="k">rec</span> <span class="i">ToString</span> <span class="i">this</span> <span class="o">=</span> 
<span class="l"> 17: </span>    <span class="k">match</span> <span class="i">this</span> <span class="k">with</span>
<span class="l"> 18: </span>    | <span onmouseout="hideTip(event, 'fst8', 22)" onmouseover="showTip(event, 'fst8', 22)" class="i">Lambda</span>(<span onmouseout="hideTip(event, 'fst5', 23)" onmouseover="showTip(event, 'fst5', 23)" class="i">var</span>, <span class="i">body</span>) <span class="k">-&gt;</span> 
<span class="l"> 19: </span>        <span onmouseout="hideTip(event, 'fst13', 24)" onmouseover="showTip(event, 'fst13', 24)" class="i">sprintf</span> <span class="s">&quot;</span><span class="s">%</span><span class="s">s</span><span class="s">%</span><span class="s">s</span><span class="s">.</span><span class="s">%</span><span class="s">s</span><span class="s">&quot;</span> <span class="i">lambdaSymbol</span> <span onmouseout="hideTip(event, 'fst5', 25)" onmouseover="showTip(event, 'fst5', 25)" class="i">var</span> (<span class="i">ToString</span> <span class="i">body</span>)
<span class="l"> 20: </span>    | <span onmouseout="hideTip(event, 'fst9', 26)" onmouseover="showTip(event, 'fst9', 26)" class="i">Var</span>(<span onmouseout="hideTip(event, 'fst5', 27)" onmouseover="showTip(event, 'fst5', 27)" class="i">var</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fst5', 28)" onmouseover="showTip(event, 'fst5', 28)" class="i">var</span>
<span class="l"> 21: </span>    | <span class="i">App</span>(<span class="i">left</span>,<span class="i">right</span>) <span class="k">-&gt;</span> 
<span class="l"> 22: </span>        <span onmouseout="hideTip(event, 'fst13', 29)" onmouseover="showTip(event, 'fst13', 29)" class="i">sprintf</span> <span class="s">&quot;</span><span class="s">(</span><span class="s">%</span><span class="s">s</span><span class="s"> </span><span class="s">%</span><span class="s">s</span><span class="s">)</span><span class="s">&quot;</span> (<span class="i">ToString</span> <span class="i">left</span>) (<span class="i">ToString</span> <span class="i">right</span>)
<span class="l"> 23: </span>  <span class="k">let</span> <span class="k">rec</span> <span class="i">fromExpr</span> (<span class="i">e</span><span class="o">:</span><span onmouseout="hideTip(event, 'fst1', 30)" onmouseover="showTip(event, 'fst1', 30)" class="i">Microsoft</span><span class="o">.</span><span onmouseout="hideTip(event, 'fst2', 31)" onmouseover="showTip(event, 'fst2', 31)" class="i">FSharp</span><span class="o">.</span><span onmouseout="hideTip(event, 'fst3', 32)" onmouseover="showTip(event, 'fst3', 32)" class="i">Quotations</span><span class="o">.</span><span onmouseout="hideTip(event, 'fst14', 33)" onmouseover="showTip(event, 'fst14', 33)" class="i">Expr</span>) <span class="o">=</span>
<span class="l"> 24: </span>    <span class="k">match</span> <span class="i">e</span> <span class="k">with</span>
<span class="l"> 25: </span>    | <span onmouseout="hideTip(event, 'fst4', 34)" onmouseover="showTip(event, 'fst4', 34)" class="i">Patterns</span><span class="o">.</span><span onmouseout="hideTip(event, 'fst15', 35)" onmouseover="showTip(event, 'fst15', 35)" class="i">Lambda</span>(<span class="i">v</span>, <span class="i">e</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fst8', 36)" onmouseover="showTip(event, 'fst8', 36)" class="i">Lambda</span>(<span class="i">v</span><span class="o">.</span><span class="i">Name</span>, <span class="i">fromExpr</span> <span class="i">e</span>)
<span class="l"> 26: </span>    | <span onmouseout="hideTip(event, 'fst4', 37)" onmouseover="showTip(event, 'fst4', 37)" class="i">Patterns</span><span class="o">.</span><span onmouseout="hideTip(event, 'fst16', 38)" onmouseover="showTip(event, 'fst16', 38)" class="i">Application</span>(<span class="i">left</span>, <span class="i">right</span>) <span class="k">-&gt;</span> <span class="i">App</span>(<span class="i">fromExpr</span> <span class="i">left</span>, <span class="i">fromExpr</span> <span class="i">right</span>)
<span class="l"> 27: </span>    | <span onmouseout="hideTip(event, 'fst4', 39)" onmouseover="showTip(event, 'fst4', 39)" class="i">Patterns</span><span class="o">.</span><span onmouseout="hideTip(event, 'fst17', 40)" onmouseover="showTip(event, 'fst17', 40)" class="i">Var</span>(<span onmouseout="hideTip(event, 'fst5', 41)" onmouseover="showTip(event, 'fst5', 41)" class="i">var</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fst9', 42)" onmouseover="showTip(event, 'fst9', 42)" class="i">Var</span>(<span onmouseout="hideTip(event, 'fst5', 43)" onmouseover="showTip(event, 'fst5', 43)" class="i">var</span><span class="o">.</span><span class="i">Name</span>)
<span class="l"> 28: </span>    | <span onmouseout="hideTip(event, 'fst4', 44)" onmouseover="showTip(event, 'fst4', 44)" class="i">Patterns</span><span class="o">.</span><span onmouseout="hideTip(event, 'fst18', 45)" onmouseover="showTip(event, 'fst18', 45)" class="i">Call</span>(<span onmouseout="hideTip(event, 'fst19', 46)" onmouseover="showTip(event, 'fst19', 46)" class="i">Some</span>(<span class="i">left</span>), <span class="i">methodInfo</span>, [<span class="i">right</span>]) <span class="k">when</span> <span class="i">methodInfo</span><span class="o">.</span><span class="i">Name</span> <span class="o">=</span> <span class="s">&quot;</span><span class="s">Invoke</span><span class="s">&quot;</span> <span class="k">-&gt;</span> 
<span class="l"> 29: </span>        <span class="i">App</span>(<span class="i">fromExpr</span> <span class="i">left</span>, <span class="i">fromExpr</span> <span class="i">right</span>)
<span class="l"> 30: </span>    | <span class="i">e</span> <span class="k">-&gt;</span> 
<span class="l"> 31: </span>        <span class="k">let</span> <span class="i">typeName</span> <span class="o">=</span> <span class="i">e</span><span class="o">.</span><span class="i">Type</span><span class="o">.</span><span class="i">ToString</span>()
<span class="l"> 32: </span>        <span onmouseout="hideTip(event, 'fst20', 47)" onmouseover="showTip(event, 'fst20', 47)" class="i">raise</span> (<span onmouseout="hideTip(event, 'fst10', 48)" onmouseover="showTip(event, 'fst10', 48)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fst21', 49)" onmouseover="showTip(event, 'fst21', 49)" class="i">Exception</span>(<span onmouseout="hideTip(event, 'fst13', 50)" onmouseover="showTip(event, 'fst13', 50)" class="i">sprintf</span> <span class="s">&quot;</span><span class="s">Cannot</span><span class="s"> </span><span class="s">convert</span><span class="s"> </span><span class="s">%</span><span class="s">s</span><span class="s"> </span><span class="s">to</span><span class="s"> </span><span class="s">lambda</span><span class="s">&quot;</span> <span class="i">typeName</span>))
<span class="l"> 33: </span>  <span class="k">let</span> <span class="k">rec</span> <span class="i">substitute</span> (<span class="i">varName</span><span class="o">:</span><span onmouseout="hideTip(event, 'fst5', 51)" onmouseover="showTip(event, 'fst5', 51)" class="i">var</span>) (<span class="i">withExpr</span><span class="o">:</span><span onmouseout="hideTip(event, 'fst7', 52)" onmouseover="showTip(event, 'fst7', 52)" class="i">term</span>) (<span class="i">expr</span><span class="o">:</span><span onmouseout="hideTip(event, 'fst7', 53)" onmouseover="showTip(event, 'fst7', 53)" class="i">term</span>) <span class="o">=</span>
<span class="l"> 34: </span>    <span class="k">let</span> <span class="i">doSubRec</span> <span class="o">=</span> <span class="i">substitute</span> <span class="i">varName</span> <span class="i">withExpr</span> 
<span class="l"> 35: </span>    <span class="k">match</span> <span class="i">expr</span> <span class="k">with</span>
<span class="l"> 36: </span>    | <span onmouseout="hideTip(event, 'fst9', 54)" onmouseover="showTip(event, 'fst9', 54)" class="i">Var</span>(<span class="i">name</span>) <span class="k">when</span> <span class="i">varName</span> <span class="o">=</span> <span class="i">name</span> <span class="k">-&gt;</span> <span class="i">withExpr</span>
<span class="l"> 37: </span>    | <span class="i">App</span>(<span class="i">left</span>, <span class="i">right</span>) <span class="k">-&gt;</span> <span class="i">App</span>(<span class="i">doSubRec</span> <span class="i">left</span>, <span class="i">doSubRec</span> <span class="i">right</span>)
<span class="l"> 38: </span>    | <span onmouseout="hideTip(event, 'fst8', 55)" onmouseover="showTip(event, 'fst8', 55)" class="i">Lambda</span>(<span onmouseout="hideTip(event, 'fst5', 56)" onmouseover="showTip(event, 'fst5', 56)" class="i">var</span>, <span class="i">body</span>) <span class="k">when</span> <span onmouseout="hideTip(event, 'fst5', 57)" onmouseover="showTip(event, 'fst5', 57)" class="i">var</span> <span class="o">&lt;&gt;</span> <span class="i">varName</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fst8', 58)" onmouseover="showTip(event, 'fst8', 58)" class="i">Lambda</span>(<span onmouseout="hideTip(event, 'fst5', 59)" onmouseover="showTip(event, 'fst5', 59)" class="i">var</span>, <span class="i">doSubRec</span> <span class="i">body</span>)
<span class="l"> 39: </span>    | <span class="i">x</span> <span class="k">-&gt;</span> <span class="i">x</span>
<span class="l"> 40: </span>  <span class="k">let</span> (|<span class="i">NonShadowingLamda</span>|_|) <span class="i">varName</span> <span class="i">expr</span> <span class="o">=</span> 
<span class="l"> 41: </span>    <span class="k">match</span> <span class="i">expr</span> <span class="k">with</span>
<span class="l"> 42: </span>    | <span onmouseout="hideTip(event, 'fst8', 60)" onmouseover="showTip(event, 'fst8', 60)" class="i">Lambda</span>(<span onmouseout="hideTip(event, 'fst5', 61)" onmouseover="showTip(event, 'fst5', 61)" class="i">var</span>, <span class="i">body</span>) <span class="k">when</span> <span onmouseout="hideTip(event, 'fst5', 62)" onmouseover="showTip(event, 'fst5', 62)" class="i">var</span> <span class="o">&lt;&gt;</span> <span class="i">varName</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fst19', 63)" onmouseover="showTip(event, 'fst19', 63)" class="i">Some</span>(<span class="i">NonShadowingLamda</span>(<span onmouseout="hideTip(event, 'fst5', 64)" onmouseover="showTip(event, 'fst5', 64)" class="i">var</span>, <span class="i">body</span>))
<span class="l"> 43: </span>    | _ <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fst22', 65)" onmouseover="showTip(event, 'fst22', 65)" class="i">None</span>
<span class="l"> 44: </span>  <span class="k">let</span> <span class="k">rec</span> <span class="i">substitute2</span> (<span class="i">varName</span><span class="o">:</span><span onmouseout="hideTip(event, 'fst5', 66)" onmouseover="showTip(event, 'fst5', 66)" class="i">var</span>) (<span class="i">withExpr</span><span class="o">:</span><span onmouseout="hideTip(event, 'fst7', 67)" onmouseover="showTip(event, 'fst7', 67)" class="i">term</span>) (<span class="i">expr</span><span class="o">:</span><span onmouseout="hideTip(event, 'fst7', 68)" onmouseover="showTip(event, 'fst7', 68)" class="i">term</span>) <span class="o">=</span>
<span class="l"> 45: </span>    <span class="k">let</span> <span class="i">doSubRec</span> <span class="o">=</span> <span class="i">substitute</span> <span class="i">varName</span> <span class="i">withExpr</span> 
<span class="l"> 46: </span>    <span class="k">match</span> <span class="i">expr</span> <span class="k">with</span>
<span class="l"> 47: </span>    | <span onmouseout="hideTip(event, 'fst9', 69)" onmouseover="showTip(event, 'fst9', 69)" class="i">Var</span>(<span class="i">name</span>) <span class="k">when</span> <span class="i">varName</span> <span class="o">=</span> <span class="i">name</span> <span class="k">-&gt;</span> <span class="i">withExpr</span>
<span class="l"> 48: </span>    | <span class="i">App</span>(<span class="i">left</span>, <span class="i">right</span>) <span class="k">-&gt;</span> <span class="i">App</span>(<span class="i">doSubRec</span> <span class="i">left</span>, <span class="i">doSubRec</span> <span class="i">right</span>)
<span class="l"> 49: </span>    | <span class="i">NonShadowingLamda</span> <span class="i">varName</span> (<span onmouseout="hideTip(event, 'fst5', 70)" onmouseover="showTip(event, 'fst5', 70)" class="i">var</span>, <span class="i">body</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fst8', 71)" onmouseover="showTip(event, 'fst8', 71)" class="i">Lambda</span>(<span onmouseout="hideTip(event, 'fst5', 72)" onmouseover="showTip(event, 'fst5', 72)" class="i">var</span>, <span class="i">doSubRec</span> <span class="i">body</span>)
<span class="l"> 50: </span>    | <span class="i">x</span> <span class="k">-&gt;</span> <span class="i">x</span>
<span class="l"> 51: </span>
<span class="l"> 52: </span>  <span class="k">let</span> <span class="i">alphaNormalize</span> (<span class="i">expr</span><span class="o">:</span><span onmouseout="hideTip(event, 'fst7', 73)" onmouseover="showTip(event, 'fst7', 73)" class="i">term</span>) <span class="o">=</span>
<span class="l"> 53: </span>    <span class="k">let</span> <span class="k">rec</span> <span class="i">normalizeRec</span> (<span class="i">n</span><span class="o">:</span><span onmouseout="hideTip(event, 'fst23', 74)" onmouseover="showTip(event, 'fst23', 74)" class="i">int</span>) (<span class="i">expr</span><span class="o">:</span><span onmouseout="hideTip(event, 'fst7', 75)" onmouseover="showTip(event, 'fst7', 75)" class="i">term</span>) <span class="o">=</span>
<span class="l"> 54: </span>      <span class="k">let</span> <span class="i">newVarName</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fst13', 76)" onmouseover="showTip(event, 'fst13', 76)" class="i">sprintf</span> <span class="s">&quot;</span><span class="s">v</span><span class="s">%</span><span class="s">i</span><span class="s">&quot;</span> <span class="i">n</span>
<span class="l"> 55: </span>      <span class="k">let</span> <span class="i">newVar</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fst9', 77)" onmouseover="showTip(event, 'fst9', 77)" class="i">Var</span>(<span class="i">newVarName</span>)
<span class="l"> 56: </span>      <span class="k">let</span> <span class="i">normalize</span> <span class="o">=</span> <span class="i">normalizeRec</span> (<span class="i">n</span> <span class="o">+</span> <span class="n">1</span>)
<span class="l"> 57: </span>      <span class="k">match</span> <span class="i">expr</span> <span class="k">with</span>
<span class="l"> 58: </span>      | <span onmouseout="hideTip(event, 'fst8', 78)" onmouseover="showTip(event, 'fst8', 78)" class="i">Lambda</span>(<span onmouseout="hideTip(event, 'fst5', 79)" onmouseover="showTip(event, 'fst5', 79)" class="i">var</span>, <span class="i">body</span>) <span class="k">as</span> <span class="i">l</span> <span class="k">-&gt;</span> 
<span class="l"> 59: </span>        <span class="k">let</span> <span class="i">newBody</span> <span class="o">=</span> <span class="i">normalize</span> <span class="i">body</span>
<span class="l"> 60: </span>        <span class="k">let</span> <span class="i">subbedVar</span> <span class="o">=</span> <span class="i">substitute</span> <span onmouseout="hideTip(event, 'fst5', 80)" onmouseover="showTip(event, 'fst5', 80)" class="i">var</span> <span class="i">newVar</span> <span class="i">newBody</span>
<span class="l"> 61: </span>        <span onmouseout="hideTip(event, 'fst8', 81)" onmouseover="showTip(event, 'fst8', 81)" class="i">Lambda</span>(<span class="i">newVarName</span>, <span class="i">subbedVar</span>)
<span class="l"> 62: </span>      | <span class="i">App</span>(<span class="i">left</span>, <span class="i">right</span>) <span class="k">-&gt;</span> <span class="i">App</span>(<span class="i">normalize</span> <span class="i">left</span>, <span class="i">normalize</span> <span class="i">right</span>)
<span class="l"> 63: </span>      | <span class="i">x</span> <span class="k">-&gt;</span> <span class="i">x</span>
<span class="l"> 64: </span>    <span class="i">normalizeRec</span> <span class="n">0</span> <span class="i">expr</span>
<span class="l"> 65: </span>  <span class="k">let</span> <span class="k">rec</span> <span class="i">evalStep</span> <span class="i">expr</span> <span class="o">=</span> 
<span class="l"> 66: </span>    <span class="k">match</span> <span class="i">expr</span> <span class="k">with</span>
<span class="l"> 67: </span>    | <span class="i">App</span>(<span onmouseout="hideTip(event, 'fst8', 82)" onmouseover="showTip(event, 'fst8', 82)" class="i">Lambda</span>(<span onmouseout="hideTip(event, 'fst5', 83)" onmouseover="showTip(event, 'fst5', 83)" class="i">var</span>, <span class="i">expr</span>), <span class="i">right</span>) <span class="k">-&gt;</span> <span class="i">substitute</span> <span onmouseout="hideTip(event, 'fst5', 84)" onmouseover="showTip(event, 'fst5', 84)" class="i">var</span> <span class="i">right</span> <span class="i">expr</span>
<span class="l"> 68: </span>    | <span class="i">App</span>(<span class="i">left</span>, <span class="i">right</span>) <span class="k">-&gt;</span> <span class="i">App</span>(<span class="i">evalStep</span> <span class="i">left</span>, <span class="i">evalStep</span> <span class="i">right</span>)
<span class="l"> 69: </span>    | <span onmouseout="hideTip(event, 'fst8', 85)" onmouseover="showTip(event, 'fst8', 85)" class="i">Lambda</span>(<span onmouseout="hideTip(event, 'fst5', 86)" onmouseover="showTip(event, 'fst5', 86)" class="i">var</span>, <span class="i">body</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fst8', 87)" onmouseover="showTip(event, 'fst8', 87)" class="i">Lambda</span>(<span onmouseout="hideTip(event, 'fst5', 88)" onmouseover="showTip(event, 'fst5', 88)" class="i">var</span>, <span class="i">evalStep</span> <span class="i">body</span>)
<span class="l"> 70: </span>    | <span class="i">x</span> <span class="k">-&gt;</span> <span class="i">x</span>
<span class="l"> 71: </span>
<span class="l"> 72: </span>  <span class="k">let</span> <span class="k">rec</span> <span class="i">eval</span> (<span class="i">maxSteps</span><span class="o">:</span><span onmouseout="hideTip(event, 'fst23', 89)" onmouseover="showTip(event, 'fst23', 89)" class="i">int</span>) (<span onmouseout="hideTip(event, 'fst7', 90)" onmouseover="showTip(event, 'fst7', 90)" class="i">term</span><span class="o">:</span><span onmouseout="hideTip(event, 'fst7', 91)" onmouseover="showTip(event, 'fst7', 91)" class="i">term</span>) <span class="o">=</span>
<span class="l"> 73: </span>    <span onmouseout="hideTip(event, 'fst24', 92)" onmouseover="showTip(event, 'fst24', 92)" class="i">seq</span> {
<span class="l"> 74: </span>      <span class="k">yield</span> <span onmouseout="hideTip(event, 'fst7', 93)" onmouseover="showTip(event, 'fst7', 93)" class="i">term</span>
<span class="l"> 75: </span>      <span class="k">let</span> <span class="i">last</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fst25', 94)" onmouseover="showTip(event, 'fst25', 94)" class="i">ref</span> <span onmouseout="hideTip(event, 'fst7', 95)" onmouseover="showTip(event, 'fst7', 95)" class="i">term</span>
<span class="l"> 76: </span>      <span class="k">let</span> <span class="i">next</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fst25', 96)" onmouseover="showTip(event, 'fst25', 96)" class="i">ref</span> (<span class="i">evalStep</span> <span onmouseout="hideTip(event, 'fst7', 97)" onmouseover="showTip(event, 'fst7', 97)" class="i">term</span>)
<span class="l"> 77: </span>      <span class="k">while</span> <span class="i">next</span><span class="o">.</span><span onmouseout="hideTip(event, 'fst26', 98)" onmouseover="showTip(event, 'fst26', 98)" class="i">Value</span> <span class="o">&lt;&gt;</span> <span class="i">last</span><span class="o">.</span><span onmouseout="hideTip(event, 'fst26', 99)" onmouseover="showTip(event, 'fst26', 99)" class="i">Value</span> <span class="k">do</span>
<span class="l"> 78: </span>        <span class="k">yield</span> <span class="i">next</span><span class="o">.</span><span onmouseout="hideTip(event, 'fst26', 100)" onmouseover="showTip(event, 'fst26', 100)" class="i">Value</span>
<span class="l"> 79: </span>        <span class="i">last</span> <span class="o">:=</span> <span class="i">next</span><span class="o">.</span><span onmouseout="hideTip(event, 'fst26', 101)" onmouseover="showTip(event, 'fst26', 101)" class="i">Value</span>
<span class="l"> 80: </span>        <span class="i">next</span> <span class="o">:=</span> <span class="i">evalStep</span> <span class="i">next</span><span class="o">.</span><span onmouseout="hideTip(event, 'fst26', 102)" onmouseover="showTip(event, 'fst26', 102)" class="i">Value</span>
<span class="l"> 81: </span>    } <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fst27', 103)" onmouseover="showTip(event, 'fst27', 103)" class="i">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fst28', 104)" onmouseover="showTip(event, 'fst28', 104)" class="i">truncate</span> <span class="i">maxSteps</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fst27', 105)" onmouseover="showTip(event, 'fst27', 105)" class="i">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fst29', 106)" onmouseover="showTip(event, 'fst29', 106)" class="i">toList</span>
<span class="l"> 82: </span>  <span class="k">let</span> <span class="i">printEval</span> <span onmouseout="hideTip(event, 'fst30', 107)" onmouseover="showTip(event, 'fst30', 107)" class="i">max</span> <span onmouseout="hideTip(event, 'fst7', 108)" onmouseover="showTip(event, 'fst7', 108)" class="i">term</span> <span class="o">=</span>
<span class="l"> 83: </span>    <span class="k">let</span> <span class="i">steps</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fst7', 109)" onmouseover="showTip(event, 'fst7', 109)" class="i">term</span> <span class="o">|&gt;</span> <span class="i">eval</span> <span onmouseout="hideTip(event, 'fst30', 110)" onmouseover="showTip(event, 'fst30', 110)" class="i">max</span>
<span class="l"> 84: </span>    <span class="k">for</span> <span class="i">step</span> <span class="k">in</span> <span class="i">steps</span> <span class="k">do</span>
<span class="l"> 85: </span>      <span onmouseout="hideTip(event, 'fst31', 111)" onmouseover="showTip(event, 'fst31', 111)" class="i">printfn</span> <span class="s">&quot;</span><span class="s">%</span><span class="s">s</span><span class="s">&quot;</span> (<span class="i">ToString</span> <span class="i">step</span>)
<span class="l"> 86: </span>    <span class="k">let</span> <span class="i">last</span> <span class="o">=</span> <span class="i">steps</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fst32', 112)" onmouseover="showTip(event, 'fst32', 112)" class="i">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fst33', 113)" onmouseover="showTip(event, 'fst33', 113)" class="i">rev</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fst32', 114)" onmouseover="showTip(event, 'fst32', 114)" class="i">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fst34', 115)" onmouseover="showTip(event, 'fst34', 115)" class="i">head</span>
<span class="l"> 87: </span>    <span class="i">last</span>
<span class="l"> 88: </span>
<span class="l"> 89: </span><span class="k">module</span> <span onmouseout="hideTip(event, 'fst35', 116)" onmouseover="showTip(event, 'fst35', 116)" class="i">BooleanLogic</span> <span class="o">=</span>
<span class="l"> 90: </span>  <span class="k">let</span> <span onmouseout="hideTip(event, 'fst36', 117)" onmouseover="showTip(event, 'fst36', 117)" class="i">Id</span> <span class="o">=</span> &lt;@@ <span class="k">fun</span> <span onmouseout="hideTip(event, 'fst37', 118)" onmouseover="showTip(event, 'fst37', 118)" class="i">x</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fst37', 119)" onmouseover="showTip(event, 'fst37', 119)" class="i">x</span> @@&gt; <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fst38', 120)" onmouseover="showTip(event, 'fst38', 120)" class="i">Lambda</span><span class="o">.</span><span class="i">fromExpr</span> 
<span class="l"> 91: </span>  <span class="k">let</span> <span onmouseout="hideTip(event, 'fst39', 121)" onmouseover="showTip(event, 'fst39', 121)" class="i">True</span> <span class="o">=</span> &lt;@@ <span class="k">fun</span> <span onmouseout="hideTip(event, 'fst37', 122)" onmouseover="showTip(event, 'fst37', 122)" class="i">x</span> <span onmouseout="hideTip(event, 'fst40', 123)" onmouseover="showTip(event, 'fst40', 123)" class="i">y</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fst37', 124)" onmouseover="showTip(event, 'fst37', 124)" class="i">x</span> @@&gt; <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fst38', 125)" onmouseover="showTip(event, 'fst38', 125)" class="i">Lambda</span><span class="o">.</span><span class="i">fromExpr</span> 
<span class="l"> 92: </span>  <span class="k">let</span> <span onmouseout="hideTip(event, 'fst41', 126)" onmouseover="showTip(event, 'fst41', 126)" class="i">False</span> <span class="o">=</span> &lt;@@ <span class="k">fun</span> <span onmouseout="hideTip(event, 'fst37', 127)" onmouseover="showTip(event, 'fst37', 127)" class="i">x</span> <span onmouseout="hideTip(event, 'fst40', 128)" onmouseover="showTip(event, 'fst40', 128)" class="i">y</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fst40', 129)" onmouseover="showTip(event, 'fst40', 129)" class="i">y</span> @@&gt; <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fst38', 130)" onmouseover="showTip(event, 'fst38', 130)" class="i">Lambda</span><span class="o">.</span><span class="i">fromExpr</span> 
<span class="l"> 93: </span>  <span class="k">let</span> <span onmouseout="hideTip(event, 'fst42', 131)" onmouseover="showTip(event, 'fst42', 131)" class="i">Not</span> <span class="o">=</span> &lt;@@ <span class="k">fun</span> <span onmouseout="hideTip(event, 'fst43', 132)" onmouseover="showTip(event, 'fst43', 132)" class="i">p</span> <span onmouseout="hideTip(event, 'fst44', 133)" onmouseover="showTip(event, 'fst44', 133)" class="i">a</span> <span onmouseout="hideTip(event, 'fst45', 134)" onmouseover="showTip(event, 'fst45', 134)" class="i">b</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fst43', 135)" onmouseover="showTip(event, 'fst43', 135)" class="i">p</span> <span onmouseout="hideTip(event, 'fst45', 136)" onmouseover="showTip(event, 'fst45', 136)" class="i">b</span> <span onmouseout="hideTip(event, 'fst44', 137)" onmouseover="showTip(event, 'fst44', 137)" class="i">a</span> @@&gt; <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fst38', 138)" onmouseover="showTip(event, 'fst38', 138)" class="i">Lambda</span><span class="o">.</span><span class="i">fromExpr</span> 
<span class="l"> 94: </span>  <span class="k">let</span> <span onmouseout="hideTip(event, 'fst46', 139)" onmouseover="showTip(event, 'fst46', 139)" class="i">And</span> <span class="o">=</span> &lt;@@ <span class="k">fun</span> (<span onmouseout="hideTip(event, 'fst47', 140)" onmouseover="showTip(event, 'fst47', 140)" class="i">p</span><span class="o">:</span><span class="i">Fn</span>) (<span onmouseout="hideTip(event, 'fst48', 141)" onmouseover="showTip(event, 'fst48', 141)" class="i">q</span><span class="o">:</span><span class="i">Fn</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fst47', 142)" onmouseover="showTip(event, 'fst47', 142)" class="i">p</span><span class="o">.</span><span class="i">Invoke</span>(<span onmouseout="hideTip(event, 'fst48', 143)" onmouseover="showTip(event, 'fst48', 143)" class="i">q</span>)<span class="o">.</span><span class="i">Invoke</span>(<span onmouseout="hideTip(event, 'fst47', 144)" onmouseover="showTip(event, 'fst47', 144)" class="i">p</span>) @@&gt; <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fst38', 145)" onmouseover="showTip(event, 'fst38', 145)" class="i">Lambda</span><span class="o">.</span><span class="i">fromExpr</span> 
<span class="l"> 95: </span>
<span class="l"> 96: </span>  <span class="k">let</span> <span onmouseout="hideTip(event, 'fst49', 146)" onmouseover="showTip(event, 'fst49', 146)" class="i">ex1</span> <span class="o">=</span> <span class="i">App</span>(<span onmouseout="hideTip(event, 'fst46', 147)" onmouseover="showTip(event, 'fst46', 147)" class="i">And</span>, <span onmouseout="hideTip(event, 'fst39', 148)" onmouseover="showTip(event, 'fst39', 148)" class="i">True</span>) <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fst38', 149)" onmouseover="showTip(event, 'fst38', 149)" class="i">Lambda</span><span class="o">.</span><span class="i">printEval</span> <span class="n">10</span>
<span class="l"> 97: </span>
<span class="l"> 98: </span>  <span class="k">let</span> <span onmouseout="hideTip(event, 'fst50', 150)" onmouseover="showTip(event, 'fst50', 150)" class="i">Zero</span> <span class="o">=</span> &lt;@@ <span class="k">fun</span> <span onmouseout="hideTip(event, 'fst51', 151)" onmouseover="showTip(event, 'fst51', 151)" class="i">f</span> <span onmouseout="hideTip(event, 'fst37', 152)" onmouseover="showTip(event, 'fst37', 152)" class="i">x</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fst37', 153)" onmouseover="showTip(event, 'fst37', 153)" class="i">x</span> @@&gt; <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fst38', 154)" onmouseover="showTip(event, 'fst38', 154)" class="i">Lambda</span><span class="o">.</span><span class="i">fromExpr</span> 
<span class="l"> 99: </span>  <span class="k">let</span> <span onmouseout="hideTip(event, 'fst52', 155)" onmouseover="showTip(event, 'fst52', 155)" class="i">One</span> <span class="o">=</span> &lt;@@ <span class="k">fun</span> <span onmouseout="hideTip(event, 'fst53', 156)" onmouseover="showTip(event, 'fst53', 156)" class="i">f</span> <span onmouseout="hideTip(event, 'fst37', 157)" onmouseover="showTip(event, 'fst37', 157)" class="i">x</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fst53', 158)" onmouseover="showTip(event, 'fst53', 158)" class="i">f</span> <span onmouseout="hideTip(event, 'fst37', 159)" onmouseover="showTip(event, 'fst37', 159)" class="i">x</span> @@&gt; <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fst38', 160)" onmouseover="showTip(event, 'fst38', 160)" class="i">Lambda</span><span class="o">.</span><span class="i">fromExpr</span>
<span class="l">100: </span>  <span class="k">let</span> <span onmouseout="hideTip(event, 'fst54', 161)" onmouseover="showTip(event, 'fst54', 161)" class="i">Two</span> <span class="o">=</span> &lt;@@ <span class="k">fun</span> <span onmouseout="hideTip(event, 'fst53', 162)" onmouseover="showTip(event, 'fst53', 162)" class="i">f</span> <span onmouseout="hideTip(event, 'fst37', 163)" onmouseover="showTip(event, 'fst37', 163)" class="i">x</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fst53', 164)" onmouseover="showTip(event, 'fst53', 164)" class="i">f</span> (<span onmouseout="hideTip(event, 'fst53', 165)" onmouseover="showTip(event, 'fst53', 165)" class="i">f</span> <span onmouseout="hideTip(event, 'fst37', 166)" onmouseover="showTip(event, 'fst37', 166)" class="i">x</span>) @@&gt; <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fst38', 167)" onmouseover="showTip(event, 'fst38', 167)" class="i">Lambda</span><span class="o">.</span><span class="i">fromExpr</span>
<span class="l">101: </span>  <span class="k">let</span> <span onmouseout="hideTip(event, 'fst55', 168)" onmouseover="showTip(event, 'fst55', 168)" class="i">Succ</span> <span class="o">=</span> &lt;@@ <span class="k">fun</span> <span onmouseout="hideTip(event, 'fst56', 169)" onmouseover="showTip(event, 'fst56', 169)" class="i">n</span> <span onmouseout="hideTip(event, 'fst53', 170)" onmouseover="showTip(event, 'fst53', 170)" class="i">f</span> <span onmouseout="hideTip(event, 'fst37', 171)" onmouseover="showTip(event, 'fst37', 171)" class="i">x</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fst53', 172)" onmouseover="showTip(event, 'fst53', 172)" class="i">f</span> (<span onmouseout="hideTip(event, 'fst56', 173)" onmouseover="showTip(event, 'fst56', 173)" class="i">n</span> <span onmouseout="hideTip(event, 'fst53', 174)" onmouseover="showTip(event, 'fst53', 174)" class="i">f</span> <span onmouseout="hideTip(event, 'fst37', 175)" onmouseover="showTip(event, 'fst37', 175)" class="i">x</span>) @@&gt; <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fst38', 176)" onmouseover="showTip(event, 'fst38', 176)" class="i">Lambda</span><span class="o">.</span><span class="i">fromExpr</span>
<span class="l">102: </span>  <span class="k">let</span> <span onmouseout="hideTip(event, 'fst57', 177)" onmouseover="showTip(event, 'fst57', 177)" class="i">Plus</span> <span class="o">=</span> &lt;@@ <span class="k">fun</span> <span onmouseout="hideTip(event, 'fst58', 178)" onmouseover="showTip(event, 'fst58', 178)" class="i">m</span> <span onmouseout="hideTip(event, 'fst59', 179)" onmouseover="showTip(event, 'fst59', 179)" class="i">n</span> <span onmouseout="hideTip(event, 'fst51', 180)" onmouseover="showTip(event, 'fst51', 180)" class="i">f</span> <span onmouseout="hideTip(event, 'fst37', 181)" onmouseover="showTip(event, 'fst37', 181)" class="i">x</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fst58', 182)" onmouseover="showTip(event, 'fst58', 182)" class="i">m</span> <span onmouseout="hideTip(event, 'fst51', 183)" onmouseover="showTip(event, 'fst51', 183)" class="i">f</span> (<span onmouseout="hideTip(event, 'fst59', 184)" onmouseover="showTip(event, 'fst59', 184)" class="i">n</span> <span onmouseout="hideTip(event, 'fst51', 185)" onmouseover="showTip(event, 'fst51', 185)" class="i">f</span> <span onmouseout="hideTip(event, 'fst37', 186)" onmouseover="showTip(event, 'fst37', 186)" class="i">x</span>) @@&gt; <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fst38', 187)" onmouseover="showTip(event, 'fst38', 187)" class="i">Lambda</span><span class="o">.</span><span class="i">fromExpr</span>
<span class="l">103: </span>
<span class="l">104: </span>  <span class="k">let</span> <span onmouseout="hideTip(event, 'fst60', 188)" onmouseover="showTip(event, 'fst60', 188)" class="i">ZeroSucc</span> <span class="o">=</span> <span class="i">App</span>(<span onmouseout="hideTip(event, 'fst55', 189)" onmouseover="showTip(event, 'fst55', 189)" class="i">Succ</span>, <span onmouseout="hideTip(event, 'fst50', 190)" onmouseover="showTip(event, 'fst50', 190)" class="i">Zero</span>) <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fst38', 191)" onmouseover="showTip(event, 'fst38', 191)" class="i">Lambda</span><span class="o">.</span><span class="i">printEval</span> <span class="n">10</span>
<span class="l">105: </span>  <span class="k">let</span> <span onmouseout="hideTip(event, 'fst61', 192)" onmouseover="showTip(event, 'fst61', 192)" class="i">OnePlus</span> <span class="o">=</span> <span class="i">App</span>(<span class="i">App</span>(<span onmouseout="hideTip(event, 'fst55', 193)" onmouseover="showTip(event, 'fst55', 193)" class="i">Succ</span>, <span onmouseout="hideTip(event, 'fst52', 194)" onmouseover="showTip(event, 'fst52', 194)" class="i">One</span>),<span onmouseout="hideTip(event, 'fst52', 195)" onmouseover="showTip(event, 'fst52', 195)" class="i">One</span>) <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fst38', 196)" onmouseover="showTip(event, 'fst38', 196)" class="i">Lambda</span><span class="o">.</span><span class="i">printEval</span> <span class="n">10</span></pre>
    <div class="tip" id="fst1">namespace Microsoft</div>
    <div class="tip" id="fst2">namespace Microsoft.FSharp</div>
    <div class="tip" id="fst3">namespace Microsoft.FSharp.Quotations</div>
    <div class="tip" id="fst4">module Patterns<br /><br />from Microsoft.FSharp.Quotations</div>
    <div class="tip" id="fst5">type var = string<br /><br />Full name: Snippet.var<br /><br />&#160;&#160;type: var<br />&#160;&#160;implements: System.IComparable<br />&#160;&#160;implements: System.ICloneable<br />&#160;&#160;implements: System.IConvertible<br />&#160;&#160;implements: System.IComparable&lt;string&gt;<br />&#160;&#160;implements: seq&lt;char&gt;<br />&#160;&#160;implements: System.Collections.IEnumerable<br />&#160;&#160;implements: System.IEquatable&lt;string&gt;<br /></div>
    <div class="tip" id="fst6">Multiple items<br />val string : &#39;T -&gt; string<br /><br />Full name: Microsoft.FSharp.Core.Operators.string<br /><br />--------------------<br />type string = System.String<br /><br />Full name: Microsoft.FSharp.Core.string<br /><br />&#160;&#160;type: string<br />&#160;&#160;implements: System.IComparable<br />&#160;&#160;implements: System.ICloneable<br />&#160;&#160;implements: System.IConvertible<br />&#160;&#160;implements: System.IComparable&lt;string&gt;<br />&#160;&#160;implements: seq&lt;char&gt;<br />&#160;&#160;implements: System.Collections.IEnumerable<br />&#160;&#160;implements: System.IEquatable&lt;string&gt;<br /></div>
    <div class="tip" id="fst7">type term = | Lambda of obj<br /><br />Full name: Snippet.term<br /><br />&#160;&#160;type: term<br />&#160;&#160;implements: System.IEquatable&lt;term&gt;<br />&#160;&#160;implements: System.Collections.IStructuralEquatable<br /></div>
    <div class="tip" id="fst8">Multiple items<br />union case term.Lambda: obj -&gt; term<br /><br />--------------------<br />active recognizer Lambda: Expr -&gt; (Var * Expr) option<br /><br />Full name: Microsoft.FSharp.Quotations.Patterns.( |Lambda|_| )</div>
    <div class="tip" id="fst9">Multiple items<br />active recognizer Var: Expr -&gt; Var option<br /><br />Full name: Microsoft.FSharp.Quotations.Patterns.( |Var|_| )<br /><br />--------------------<br />type Var =<br />&#160;&#160;class<br />&#160;&#160;&#160;&#160;interface System.IComparable<br />&#160;&#160;&#160;&#160;new : name:string * typ:System.Type * ?isMutable:bool -&gt; Var<br />&#160;&#160;&#160;&#160;member IsMutable : bool<br />&#160;&#160;&#160;&#160;member Name : string<br />&#160;&#160;&#160;&#160;member Type : System.Type<br />&#160;&#160;&#160;&#160;static member Global : name:string * typ:System.Type -&gt; Var<br />&#160;&#160;end<br /><br />Full name: Microsoft.FSharp.Quotations.Var<br /><br />&#160;&#160;type: Var<br />&#160;&#160;implements: System.IComparable<br /></div>
    <div class="tip" id="fst10">namespace System</div>
    <div class="tip" id="fst11">type Char =<br />&#160;&#160;struct<br />&#160;&#160;&#160;&#160;member CompareTo : obj -&gt; int<br />&#160;&#160;&#160;&#160;member CompareTo : char -&gt; int<br />&#160;&#160;&#160;&#160;member Equals : obj -&gt; bool<br />&#160;&#160;&#160;&#160;member Equals : char -&gt; bool<br />&#160;&#160;&#160;&#160;member GetHashCode : unit -&gt; int<br />&#160;&#160;&#160;&#160;member GetTypeCode : unit -&gt; System.TypeCode<br />&#160;&#160;&#160;&#160;member ToString : unit -&gt; string<br />&#160;&#160;&#160;&#160;member ToString : System.IFormatProvider -&gt; string<br />&#160;&#160;&#160;&#160;static val MaxValue : char<br />&#160;&#160;&#160;&#160;static val MinValue : char<br />&#160;&#160;&#160;&#160;static member ConvertFromUtf32 : int -&gt; string<br />&#160;&#160;&#160;&#160;static member ConvertToUtf32 : char * char -&gt; int<br />&#160;&#160;&#160;&#160;static member ConvertToUtf32 : string * int -&gt; int<br />&#160;&#160;&#160;&#160;static member GetNumericValue : char -&gt; float<br />&#160;&#160;&#160;&#160;static member GetNumericValue : string * int -&gt; float<br />&#160;&#160;&#160;&#160;static member GetUnicodeCategory : char -&gt; System.Globalization.UnicodeCategory<br />&#160;&#160;&#160;&#160;static member GetUnicodeCategory : string * int -&gt; System.Globalization.UnicodeCategory<br />&#160;&#160;&#160;&#160;static member IsControl : char -&gt; bool<br />&#160;&#160;&#160;&#160;static member IsControl : string * int -&gt; bool<br />&#160;&#160;&#160;&#160;static member IsDigit : char -&gt; bool<br />&#160;&#160;&#160;&#160;static member IsDigit : string * int -&gt; bool<br />&#160;&#160;&#160;&#160;static member IsHighSurrogate : char -&gt; bool<br />&#160;&#160;&#160;&#160;static member IsHighSurrogate : string * int -&gt; bool<br />&#160;&#160;&#160;&#160;static member IsLetter : char -&gt; bool<br />&#160;&#160;&#160;&#160;static member IsLetter : string * int -&gt; bool<br />&#160;&#160;&#160;&#160;static member IsLetterOrDigit : char -&gt; bool<br />&#160;&#160;&#160;&#160;static member IsLetterOrDigit : string * int -&gt; bool<br />&#160;&#160;&#160;&#160;static member IsLowSurrogate : char -&gt; bool<br />&#160;&#160;&#160;&#160;static member IsLowSurrogate : string * int -&gt; bool<br />&#160;&#160;&#160;&#160;static member IsLower : char -&gt; bool<br />&#160;&#160;&#160;&#160;static member IsLower : string * int -&gt; bool<br />&#160;&#160;&#160;&#160;static member IsNumber : char -&gt; bool<br />&#160;&#160;&#160;&#160;static member IsNumber : string * int -&gt; bool<br />&#160;&#160;&#160;&#160;static member IsPunctuation : char -&gt; bool<br />&#160;&#160;&#160;&#160;static member IsPunctuation : string * int -&gt; bool<br />&#160;&#160;&#160;&#160;static member IsSeparator : char -&gt; bool<br />&#160;&#160;&#160;&#160;static member IsSeparator : string * int -&gt; bool<br />&#160;&#160;&#160;&#160;static member IsSurrogate : char -&gt; bool<br />&#160;&#160;&#160;&#160;static member IsSurrogate : string * int -&gt; bool<br />&#160;&#160;&#160;&#160;static member IsSurrogatePair : string * int -&gt; bool<br />&#160;&#160;&#160;&#160;static member IsSurrogatePair : char * char -&gt; bool<br />&#160;&#160;&#160;&#160;static member IsSymbol : char -&gt; bool<br />&#160;&#160;&#160;&#160;static member IsSymbol : string * int -&gt; bool<br />&#160;&#160;&#160;&#160;static member IsUpper : char -&gt; bool<br />&#160;&#160;&#160;&#160;static member IsUpper : string * int -&gt; bool<br />&#160;&#160;&#160;&#160;static member IsWhiteSpace : char -&gt; bool<br />&#160;&#160;&#160;&#160;static member IsWhiteSpace : string * int -&gt; bool<br />&#160;&#160;&#160;&#160;static member Parse : string -&gt; char<br />&#160;&#160;&#160;&#160;static member ToLower : char -&gt; char<br />&#160;&#160;&#160;&#160;static member ToLower : char * System.Globalization.CultureInfo -&gt; char<br />&#160;&#160;&#160;&#160;static member ToLowerInvariant : char -&gt; char<br />&#160;&#160;&#160;&#160;static member ToString : char -&gt; string<br />&#160;&#160;&#160;&#160;static member ToUpper : char -&gt; char<br />&#160;&#160;&#160;&#160;static member ToUpper : char * System.Globalization.CultureInfo -&gt; char<br />&#160;&#160;&#160;&#160;static member ToUpperInvariant : char -&gt; char<br />&#160;&#160;&#160;&#160;static member TryParse : string * char -&gt; bool<br />&#160;&#160;end<br /><br />Full name: System.Char<br /><br />&#160;&#160;type: System.Char<br />&#160;&#160;implements: System.IComparable<br />&#160;&#160;implements: System.IConvertible<br />&#160;&#160;implements: System.IComparable&lt;char&gt;<br />&#160;&#160;implements: System.IEquatable&lt;char&gt;<br />&#160;&#160;inherits: System.ValueType<br /></div>
    <div class="tip" id="fst12">System.Char.ConvertFromUtf32(utf32: int) : string</div>
    <div class="tip" id="fst13">val sprintf : Printf.StringFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.sprintf</div>
    <div class="tip" id="fst14">Multiple items<br />type Expr =<br />&#160;&#160;class<br />&#160;&#160;&#160;&#160;override Equals : obj:obj -&gt; bool<br />&#160;&#160;&#160;&#160;member GetFreeVars : unit -&gt; seq&lt;Var&gt;<br />&#160;&#160;&#160;&#160;member Substitute : substitution:(Var -&gt; Expr option) -&gt; Expr<br />&#160;&#160;&#160;&#160;member CustomAttributes : Expr list<br />&#160;&#160;&#160;&#160;member Type : System.Type<br />&#160;&#160;&#160;&#160;static member AddressOf : target:Expr -&gt; Expr<br />&#160;&#160;&#160;&#160;static member AddressSet : target:Expr * value:Expr -&gt; Expr<br />&#160;&#160;&#160;&#160;static member Application : functionExpr:Expr * argument:Expr -&gt; Expr<br />&#160;&#160;&#160;&#160;static member Applications : functionExpr:Expr * arguments:Expr list list -&gt; Expr<br />&#160;&#160;&#160;&#160;static member Call : methodInfo:System.Reflection.MethodInfo * arguments:Expr list -&gt; Expr<br />&#160;&#160;&#160;&#160;static member Call : obj:Expr * methodInfo:System.Reflection.MethodInfo * arguments:Expr list -&gt; Expr<br />&#160;&#160;&#160;&#160;static member Cast : source:Expr -&gt; Expr&lt;&#39;T&gt;<br />&#160;&#160;&#160;&#160;static member Coerce : source:Expr * target:System.Type -&gt; Expr<br />&#160;&#160;&#160;&#160;static member DefaultValue : expressionType:System.Type -&gt; Expr<br />&#160;&#160;&#160;&#160;static member Deserialize : qualifyingType:System.Type * spliceTypes:System.Type list * spliceExprs:Expr list * bytes:byte [] -&gt; Expr<br />&#160;&#160;&#160;&#160;static member FieldGet : fieldInfo:System.Reflection.FieldInfo -&gt; Expr<br />&#160;&#160;&#160;&#160;static member FieldGet : obj:Expr * fieldInfo:System.Reflection.FieldInfo -&gt; Expr<br />&#160;&#160;&#160;&#160;static member FieldSet : fieldInfo:System.Reflection.FieldInfo * value:Expr -&gt; Expr<br />&#160;&#160;&#160;&#160;static member FieldSet : obj:Expr * fieldInfo:System.Reflection.FieldInfo * value:Expr -&gt; Expr<br />&#160;&#160;&#160;&#160;static member ForIntegerRangeLoop : loopVariable:Var * start:Expr * endExpr:Expr * body:Expr -&gt; Expr<br />&#160;&#160;&#160;&#160;static member GlobalVar : name:string -&gt; Expr&lt;&#39;T&gt;<br />&#160;&#160;&#160;&#160;static member IfThenElse : guard:Expr * thenExpr:Expr * elseExpr:Expr -&gt; Expr<br />&#160;&#160;&#160;&#160;static member Lambda : parameter:Var * body:Expr -&gt; Expr<br />&#160;&#160;&#160;&#160;static member Let : letVariable:Var * letExpr:Expr * body:Expr -&gt; Expr<br />&#160;&#160;&#160;&#160;static member LetRecursive : bindings:(Var * Expr) list * body:Expr -&gt; Expr<br />&#160;&#160;&#160;&#160;static member NewArray : elementType:System.Type * elements:Expr list -&gt; Expr<br />&#160;&#160;&#160;&#160;static member NewDelegate : delegateType:System.Type * parameters:Var list * body:Expr -&gt; Expr<br />&#160;&#160;&#160;&#160;static member NewObject : constructorInfo:System.Reflection.ConstructorInfo * arguments:Expr list -&gt; Expr<br />&#160;&#160;&#160;&#160;static member NewRecord : recordType:System.Type * elements:Expr list -&gt; Expr<br />&#160;&#160;&#160;&#160;static member NewTuple : elements:Expr list -&gt; Expr<br />&#160;&#160;&#160;&#160;static member NewUnionCase : unionCase:Reflection.UnionCaseInfo * arguments:Expr list -&gt; Expr<br />&#160;&#160;&#160;&#160;static member PropertyGet : property:System.Reflection.PropertyInfo * ?indexerArgs:Expr list -&gt; Expr<br />&#160;&#160;&#160;&#160;static member PropertyGet : obj:Expr * property:System.Reflection.PropertyInfo * ?indexerArgs:Expr list -&gt; Expr<br />&#160;&#160;&#160;&#160;static member PropertySet : property:System.Reflection.PropertyInfo * value:Expr * ?indexerArgs:Expr list -&gt; Expr<br />&#160;&#160;&#160;&#160;static member PropertySet : obj:Expr * property:System.Reflection.PropertyInfo * value:Expr * ?indexerArgs:Expr list -&gt; Expr<br />&#160;&#160;&#160;&#160;static member Quote : inner:Expr -&gt; Expr<br />&#160;&#160;&#160;&#160;static member RegisterReflectedDefinitions : assembly:System.Reflection.Assembly * resource:string * serializedValue:byte [] -&gt; unit<br />&#160;&#160;&#160;&#160;static member Sequential : first:Expr * second:Expr -&gt; Expr<br />&#160;&#160;&#160;&#160;static member TryFinally : body:Expr * compensation:Expr -&gt; Expr<br />&#160;&#160;&#160;&#160;static member TryGetReflectedDefinition : methodBase:System.Reflection.MethodBase -&gt; Expr option<br />&#160;&#160;&#160;&#160;static member TryWith : body:Expr * filterVar:Var * filterBody:Expr * catchVar:Var * catchBody:Expr -&gt; Expr<br />&#160;&#160;&#160;&#160;static member TupleGet : tuple:Expr * index:int -&gt; Expr<br />&#160;&#160;&#160;&#160;static member TypeTest : source:Expr * target:System.Type -&gt; Expr<br />&#160;&#160;&#160;&#160;static member UnionCaseTest : source:Expr * unionCase:Reflection.UnionCaseInfo -&gt; Expr<br />&#160;&#160;&#160;&#160;static member Value : value:&#39;T -&gt; Expr<br />&#160;&#160;&#160;&#160;static member Value : value:obj * expressionType:System.Type -&gt; Expr<br />&#160;&#160;&#160;&#160;static member Var : variable:Var -&gt; Expr<br />&#160;&#160;&#160;&#160;static member VarSet : variable:Var * value:Expr -&gt; Expr<br />&#160;&#160;&#160;&#160;static member WhileLoop : guard:Expr * body:Expr -&gt; Expr<br />&#160;&#160;end<br /><br />Full name: Microsoft.FSharp.Quotations.Expr<br /><br />--------------------<br />type Expr&lt;&#39;T&gt; =<br />&#160;&#160;class<br />&#160;&#160;&#160;&#160;inherit Expr<br />&#160;&#160;&#160;&#160;member Raw : Expr<br />&#160;&#160;end<br /><br />Full name: Microsoft.FSharp.Quotations.Expr&lt;_&gt;<br /><br />&#160;&#160;type: Expr&lt;&#39;T&gt;<br />&#160;&#160;inherits: Expr<br /></div>
    <div class="tip" id="fst15">active recognizer Lambda: Expr -&gt; (Var * Expr) option<br /><br />Full name: Microsoft.FSharp.Quotations.Patterns.( |Lambda|_| )</div>
    <div class="tip" id="fst16">active recognizer Application: Expr -&gt; (Expr * Expr) option<br /><br />Full name: Microsoft.FSharp.Quotations.Patterns.( |Application|_| )</div>
    <div class="tip" id="fst17">active recognizer Var: Expr -&gt; Var option<br /><br />Full name: Microsoft.FSharp.Quotations.Patterns.( |Var|_| )</div>
    <div class="tip" id="fst18">active recognizer Call: Expr -&gt; (Expr option * System.Reflection.MethodInfo * Expr list) option<br /><br />Full name: Microsoft.FSharp.Quotations.Patterns.( |Call|_| )</div>
    <div class="tip" id="fst19">union case Option.Some: &#39;T -&gt; Option&lt;&#39;T&gt;</div>
    <div class="tip" id="fst20">val raise : System.Exception -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.Operators.raise</div>
    <div class="tip" id="fst21">type Exception =<br />&#160;&#160;class<br />&#160;&#160;&#160;&#160;new : unit -&gt; System.Exception<br />&#160;&#160;&#160;&#160;new : string -&gt; System.Exception<br />&#160;&#160;&#160;&#160;new : string * System.Exception -&gt; System.Exception<br />&#160;&#160;&#160;&#160;member Data : System.Collections.IDictionary<br />&#160;&#160;&#160;&#160;member GetBaseException : unit -&gt; System.Exception<br />&#160;&#160;&#160;&#160;member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit<br />&#160;&#160;&#160;&#160;member GetType : unit -&gt; System.Type<br />&#160;&#160;&#160;&#160;member HResult : int with get, set<br />&#160;&#160;&#160;&#160;member HelpLink : string with get, set<br />&#160;&#160;&#160;&#160;member InnerException : System.Exception<br />&#160;&#160;&#160;&#160;member Message : string<br />&#160;&#160;&#160;&#160;member Source : string with get, set<br />&#160;&#160;&#160;&#160;member StackTrace : string<br />&#160;&#160;&#160;&#160;member TargetSite : System.Reflection.MethodBase<br />&#160;&#160;&#160;&#160;member ToString : unit -&gt; string<br />&#160;&#160;end<br /><br />Full name: System.Exception<br /><br />&#160;&#160;type: System.Exception<br />&#160;&#160;implements: System.Runtime.Serialization.ISerializable<br />&#160;&#160;implements: System.Runtime.InteropServices._Exception<br /></div>
    <div class="tip" id="fst22">union case Option.None: Option&lt;&#39;T&gt;</div>
    <div class="tip" id="fst23">Multiple items<br />val int : &#39;T -&gt; int (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.int<br /><br />--------------------<br />type int&lt;&#39;Measure&gt; = int<br /><br />Full name: Microsoft.FSharp.Core.int&lt;_&gt;<br /><br />&#160;&#160;type: int&lt;&#39;Measure&gt;<br />&#160;&#160;implements: System.IComparable<br />&#160;&#160;implements: System.IConvertible<br />&#160;&#160;implements: System.IFormattable<br />&#160;&#160;implements: System.IComparable&lt;int&lt;&#39;Measure&gt;&gt;<br />&#160;&#160;implements: System.IEquatable&lt;int&lt;&#39;Measure&gt;&gt;<br />&#160;&#160;inherits: System.ValueType<br /><br /><br />--------------------<br />type int = int32<br /><br />Full name: Microsoft.FSharp.Core.int<br /><br />&#160;&#160;type: int<br />&#160;&#160;implements: System.IComparable<br />&#160;&#160;implements: System.IFormattable<br />&#160;&#160;implements: System.IConvertible<br />&#160;&#160;implements: System.IComparable&lt;int&gt;<br />&#160;&#160;implements: System.IEquatable&lt;int&gt;<br />&#160;&#160;inherits: System.ValueType<br /></div>
    <div class="tip" id="fst24">Multiple items<br />val seq : seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Core.Operators.seq<br /><br />--------------------<br />type seq&lt;&#39;T&gt; = System.Collections.Generic.IEnumerable&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.seq&lt;_&gt;<br /><br />&#160;&#160;type: seq&lt;&#39;T&gt;<br />&#160;&#160;inherits: System.Collections.IEnumerable<br /></div>
    <div class="tip" id="fst25">Multiple items<br />val ref : &#39;T -&gt; &#39;T ref<br /><br />Full name: Microsoft.FSharp.Core.Operators.ref<br /><br />--------------------<br />type &#39;T ref = Ref&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Core.ref&lt;_&gt;<br /><br />&#160;&#160;type: &#39;T ref<br />&#160;&#160;implements: System.Collections.IStructuralEquatable<br />&#160;&#160;implements: System.IComparable&lt;Ref&lt;&#39;T&gt;&gt;<br />&#160;&#160;implements: System.IComparable<br />&#160;&#160;implements: System.Collections.IStructuralComparable<br /></div>
    <div class="tip" id="fst26">active recognizer Value: Expr -&gt; (obj * System.Type) option<br /><br />Full name: Microsoft.FSharp.Quotations.Patterns.( |Value|_| )</div>
    <div class="tip" id="fst27">module Seq<br /><br />from Microsoft.FSharp.Collections</div>
    <div class="tip" id="fst28">val truncate : int -&gt; seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.Seq.truncate</div>
    <div class="tip" id="fst29">val toList : seq&lt;&#39;T&gt; -&gt; &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.Seq.toList</div>
    <div class="tip" id="fst30">val max : &#39;T -&gt; &#39;T -&gt; &#39;T (requires comparison)<br /><br />Full name: Microsoft.FSharp.Core.Operators.max</div>
    <div class="tip" id="fst31">val printfn : Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn</div>
    <div class="tip" id="fst32">Multiple items<br />module List<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type List&lt;&#39;T&gt; =<br />&#160;&#160;| ( [] )<br />&#160;&#160;| ( :: ) of &#39;T * &#39;T list<br />&#160;&#160;with<br />&#160;&#160;&#160;&#160;interface System.Collections.IEnumerable<br />&#160;&#160;&#160;&#160;interface System.Collections.Generic.IEnumerable&lt;&#39;T&gt;<br />&#160;&#160;&#160;&#160;member Head : &#39;T<br />&#160;&#160;&#160;&#160;member IsEmpty : bool<br />&#160;&#160;&#160;&#160;member Item : index:int -&gt; &#39;T with get<br />&#160;&#160;&#160;&#160;member Length : int<br />&#160;&#160;&#160;&#160;member Tail : &#39;T list<br />&#160;&#160;&#160;&#160;static member Cons : head:&#39;T * tail:&#39;T list -&gt; &#39;T list<br />&#160;&#160;&#160;&#160;static member Empty : &#39;T list<br />&#160;&#160;end<br /><br />Full name: Microsoft.FSharp.Collections.List&lt;_&gt;<br /><br />&#160;&#160;type: List&lt;&#39;T&gt;<br />&#160;&#160;implements: System.Collections.IStructuralEquatable<br />&#160;&#160;implements: System.IComparable&lt;List&lt;&#39;T&gt;&gt;<br />&#160;&#160;implements: System.IComparable<br />&#160;&#160;implements: System.Collections.IStructuralComparable<br />&#160;&#160;implements: System.Collections.Generic.IEnumerable&lt;&#39;T&gt;<br />&#160;&#160;implements: System.Collections.IEnumerable<br /></div>
    <div class="tip" id="fst33">val rev : &#39;T list -&gt; &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List.rev</div>
    <div class="tip" id="fst34">val head : &#39;T list -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Collections.List.head</div>
    <div class="tip" id="fst35">module BooleanLogic<br /><br />from Snippet</div>
    <div class="tip" id="fst36">val Id : obj<br /><br />Full name: Snippet.BooleanLogic.Id</div>
    <div class="tip" id="fst37">val x : obj</div>
    <div class="tip" id="fst38">union case term.Lambda: obj -&gt; term</div>
    <div class="tip" id="fst39">val True : obj<br /><br />Full name: Snippet.BooleanLogic.True</div>
    <div class="tip" id="fst40">val y : obj</div>
    <div class="tip" id="fst41">val False : obj<br /><br />Full name: Snippet.BooleanLogic.False</div>
    <div class="tip" id="fst42">val Not : obj<br /><br />Full name: Snippet.BooleanLogic.Not</div>
    <div class="tip" id="fst43">val p : (obj -&gt; obj -&gt; obj)</div>
    <div class="tip" id="fst44">val a : obj</div>
    <div class="tip" id="fst45">val b : obj</div>
    <div class="tip" id="fst46">val And : obj<br /><br />Full name: Snippet.BooleanLogic.And</div>
    <div class="tip" id="fst47">val p : obj</div>
    <div class="tip" id="fst48">val q : obj</div>
    <div class="tip" id="fst49">val ex1 : obj<br /><br />Full name: Snippet.BooleanLogic.ex1</div>
    <div class="tip" id="fst50">val Zero : obj<br /><br />Full name: Snippet.BooleanLogic.Zero</div>
    <div class="tip" id="fst51">val f : obj</div>
    <div class="tip" id="fst52">val One : obj<br /><br />Full name: Snippet.BooleanLogic.One</div>
    <div class="tip" id="fst53">val f : (obj -&gt; obj)</div>
    <div class="tip" id="fst54">val Two : obj<br /><br />Full name: Snippet.BooleanLogic.Two</div>
    <div class="tip" id="fst55">val Succ : obj<br /><br />Full name: Snippet.BooleanLogic.Succ</div>
    <div class="tip" id="fst56">val n : ((obj -&gt; obj) -&gt; obj -&gt; obj)</div>
    <div class="tip" id="fst57">val Plus : obj<br /><br />Full name: Snippet.BooleanLogic.Plus</div>
    <div class="tip" id="fst58">val m : (obj -&gt; obj -&gt; obj)</div>
    <div class="tip" id="fst59">val n : (obj -&gt; obj -&gt; obj)</div>
    <div class="tip" id="fst60">val ZeroSucc : obj<br /><br />Full name: Snippet.BooleanLogic.ZeroSucc</div>
    <div class="tip" id="fst61">val OnePlus : obj<br /><br />Full name: Snippet.BooleanLogic.OnePlus</div>

  </body>
</html>
