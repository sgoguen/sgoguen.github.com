<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 
<html xmlns="http://www.w3.org/1999/xhtml">
<head><link rel="stylesheet" type="text/css" href="style.css" />
<script type="text/javascript" src="tips.js"></script></head><body>
<h2>Converts F# code to our object hierarchy</h2>
<pre class="fssnip">
<span class="l"> 1: </span><span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fstips1', 1)" onmouseover="showTip(event, 'fstips1', 1)" class="i">FromQuotation</span> (<span onmouseout="hideTip(event, 'fstips2', 2)" onmouseover="showTip(event, 'fstips2', 2)" class="i">q</span><span class="o">:</span><span onmouseout="hideTip(event, 'fstips3', 3)" onmouseover="showTip(event, 'fstips3', 3)" class="i">Quotations</span><span class="o">.</span><span onmouseout="hideTip(event, 'fstips4', 4)" onmouseover="showTip(event, 'fstips4', 4)" class="i">Expr</span>) <span class="o">=</span> 
<span class="l"> 2: </span>  <span class="k">match</span> <span onmouseout="hideTip(event, 'fstips2', 5)" onmouseover="showTip(event, 'fstips2', 5)" class="i">q</span> <span class="k">with</span>
<span class="l"> 3: </span>  | <span onmouseout="hideTip(event, 'fstips5', 6)" onmouseover="showTip(event, 'fstips5', 6)" class="i">Var</span>(<span onmouseout="hideTip(event, 'fstips6', 7)" onmouseover="showTip(event, 'fstips6', 7)" class="i">v</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fstips7', 8)" onmouseover="showTip(event, 'fstips7', 8)" class="i">Variable</span>(<span onmouseout="hideTip(event, 'fstips6', 9)" onmouseover="showTip(event, 'fstips6', 9)" class="i">v</span><span class="o">.</span><span onmouseout="hideTip(event, 'fstips8', 10)" onmouseover="showTip(event, 'fstips8', 10)" class="i">Name</span>)
<span class="l"> 4: </span>  | <span onmouseout="hideTip(event, 'fstips9', 11)" onmouseover="showTip(event, 'fstips9', 11)" class="i">Value</span>((<span onmouseout="hideTip(event, 'fstips10', 12)" onmouseover="showTip(event, 'fstips10', 12)" class="i">o</span>,<span onmouseout="hideTip(event, 'fstips11', 13)" onmouseover="showTip(event, 'fstips11', 13)" class="i">t</span>)) <span class="k">when</span> <span onmouseout="hideTip(event, 'fstips11', 14)" onmouseover="showTip(event, 'fstips11', 14)" class="i">t</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fstips12', 15)" onmouseover="showTip(event, 'fstips12', 15)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fstips13', 16)" onmouseover="showTip(event, 'fstips13', 16)" class="i">int</span><span class="o">&gt;</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fstips9', 17)" onmouseover="showTip(event, 'fstips9', 17)" class="i">Value</span>(<span onmouseout="hideTip(event, 'fstips10', 18)" onmouseover="showTip(event, 'fstips10', 18)" class="i">o</span> <span class="o">:?&gt;</span> <span onmouseout="hideTip(event, 'fstips13', 19)" onmouseover="showTip(event, 'fstips13', 19)" class="i">int</span>)
<span class="l"> 5: </span>  | <span onmouseout="hideTip(event, 'fstips14', 20)" onmouseover="showTip(event, 'fstips14', 20)" class="i">Call</span>(_,<span onmouseout="hideTip(event, 'fstips15', 21)" onmouseover="showTip(event, 'fstips15', 21)" class="i">m</span>,[<span onmouseout="hideTip(event, 'fstips16', 22)" onmouseover="showTip(event, 'fstips16', 22)" class="i">x</span>;<span onmouseout="hideTip(event, 'fstips17', 23)" onmouseover="showTip(event, 'fstips17', 23)" class="i">y</span>]) <span class="k">when</span> <span onmouseout="hideTip(event, 'fstips15', 24)" onmouseover="showTip(event, 'fstips15', 24)" class="i">m</span><span class="o">.</span><span onmouseout="hideTip(event, 'fstips18', 25)" onmouseover="showTip(event, 'fstips18', 25)" class="i">Name</span> <span class="o">=</span> <span class="s">&quot;</span><span class="s">op_Addition</span><span class="s">&quot;</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fstips19', 26)" onmouseover="showTip(event, 'fstips19', 26)" class="i">Add</span>( (<span onmouseout="hideTip(event, 'fstips1', 27)" onmouseover="showTip(event, 'fstips1', 27)" class="i">FromQuotation</span> <span onmouseout="hideTip(event, 'fstips16', 28)" onmouseover="showTip(event, 'fstips16', 28)" class="i">x</span>), (<span onmouseout="hideTip(event, 'fstips1', 29)" onmouseover="showTip(event, 'fstips1', 29)" class="i">FromQuotation</span> <span onmouseout="hideTip(event, 'fstips17', 30)" onmouseover="showTip(event, 'fstips17', 30)" class="i">y</span>) )
<span class="l"> 6: </span>  | <span onmouseout="hideTip(event, 'fstips14', 31)" onmouseover="showTip(event, 'fstips14', 31)" class="i">Call</span>(_,<span onmouseout="hideTip(event, 'fstips15', 32)" onmouseover="showTip(event, 'fstips15', 32)" class="i">m</span>,[<span onmouseout="hideTip(event, 'fstips16', 33)" onmouseover="showTip(event, 'fstips16', 33)" class="i">x</span>;<span onmouseout="hideTip(event, 'fstips17', 34)" onmouseover="showTip(event, 'fstips17', 34)" class="i">y</span>]) <span class="k">when</span> <span onmouseout="hideTip(event, 'fstips15', 35)" onmouseover="showTip(event, 'fstips15', 35)" class="i">m</span><span class="o">.</span><span onmouseout="hideTip(event, 'fstips18', 36)" onmouseover="showTip(event, 'fstips18', 36)" class="i">Name</span> <span class="o">=</span> <span class="s">&quot;</span><span class="s">op_Multiply</span><span class="s">&quot;</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fstips20', 37)" onmouseover="showTip(event, 'fstips20', 37)" class="i">Mul</span>( (<span onmouseout="hideTip(event, 'fstips1', 38)" onmouseover="showTip(event, 'fstips1', 38)" class="i">FromQuotation</span> <span onmouseout="hideTip(event, 'fstips16', 39)" onmouseover="showTip(event, 'fstips16', 39)" class="i">x</span>), (<span onmouseout="hideTip(event, 'fstips1', 40)" onmouseover="showTip(event, 'fstips1', 40)" class="i">FromQuotation</span> <span onmouseout="hideTip(event, 'fstips17', 41)" onmouseover="showTip(event, 'fstips17', 41)" class="i">y</span>) )
<span class="l"> 7: </span>  | <span onmouseout="hideTip(event, 'fstips21', 42)" onmouseover="showTip(event, 'fstips21', 42)" class="i">Let</span>(<span onmouseout="hideTip(event, 'fstips6', 43)" onmouseover="showTip(event, 'fstips6', 43)" class="i">v</span>, <span onmouseout="hideTip(event, 'fstips22', 44)" onmouseover="showTip(event, 'fstips22', 44)" class="i">defined</span>, <span onmouseout="hideTip(event, 'fstips23', 45)" onmouseover="showTip(event, 'fstips23', 45)" class="i">inBlock</span>) <span class="k">-&gt;</span> 
<span class="l"> 8: </span>      <span class="k">let</span> <span onmouseout="hideTip(event, 'fstips24', 46)" onmouseover="showTip(event, 'fstips24', 46)" class="i">inBlock</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fstips24', 47)" onmouseover="showTip(event, 'fstips24', 47)" class="i">inBlock</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fstips1', 48)" onmouseover="showTip(event, 'fstips1', 48)" class="i">FromQuotation</span>
<span class="l"> 9: </span>      <span class="k">let</span> <span onmouseout="hideTip(event, 'fstips25', 49)" onmouseover="showTip(event, 'fstips25', 49)" class="i">defined</span> <span class="o">=</span> (<span onmouseout="hideTip(event, 'fstips25', 50)" onmouseover="showTip(event, 'fstips25', 50)" class="i">defined</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fstips1', 51)" onmouseover="showTip(event, 'fstips1', 51)" class="i">FromQuotation</span>)
<span class="l">10: </span>      <span onmouseout="hideTip(event, 'fstips24', 52)" onmouseover="showTip(event, 'fstips24', 52)" class="i">inBlock</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fstips26', 53)" onmouseover="showTip(event, 'fstips26', 53)" class="i">Replace</span> (<span onmouseout="hideTip(event, 'fstips7', 54)" onmouseover="showTip(event, 'fstips7', 54)" class="i">Variable</span>(<span onmouseout="hideTip(event, 'fstips6', 55)" onmouseover="showTip(event, 'fstips6', 55)" class="i">v</span><span class="o">.</span><span onmouseout="hideTip(event, 'fstips8', 56)" onmouseover="showTip(event, 'fstips8', 56)" class="i">Name</span>)) <span onmouseout="hideTip(event, 'fstips25', 57)" onmouseover="showTip(event, 'fstips25', 57)" class="i">defined</span>
<span class="l">11: </span>  | <span onmouseout="hideTip(event, 'fstips27', 58)" onmouseover="showTip(event, 'fstips27', 58)" class="i">e</span> <span class="k">-&gt;</span> 
<span class="l">12: </span>    <span onmouseout="hideTip(event, 'fstips28', 59)" onmouseover="showTip(event, 'fstips28', 59)" class="i">printfn</span> <span class="s">&quot;</span><span class="s">Quote</span><span class="s">:</span><span class="s"> </span><span class="s">%</span><span class="s">A</span><span class="s">&quot;</span> <span onmouseout="hideTip(event, 'fstips27', 60)" onmouseover="showTip(event, 'fstips27', 60)" class="i">e</span> 
<span class="l">13: </span>    <span onmouseout="hideTip(event, 'fstips29', 61)" onmouseover="showTip(event, 'fstips29', 61)" class="i">raise</span> (<span onmouseout="hideTip(event, 'fstips30', 62)" onmouseover="showTip(event, 'fstips30', 62)" class="i">QuotationError</span>(<span onmouseout="hideTip(event, 'fstips27', 63)" onmouseover="showTip(event, 'fstips27', 63)" class="i">e</span>))<a target="_blank" class="fssniplink" href="http://tomasp.net/fswebsnippets">F# Web Snippets</a>
</pre>
<h2>An example</h2>
<pre class="fssnip">
<span class="l">1: </span><span class="k">let</span> <span onmouseout="hideTip(event, 'fstips31', 64)" onmouseover="showTip(event, 'fstips31', 64)" class="i">code</span> <span class="o">=</span> 
<span class="l">2: </span>  &lt;@ 
<span class="l">3: </span>    <span class="k">let</span> <span onmouseout="hideTip(event, 'fstips32', 65)" onmouseover="showTip(event, 'fstips32', 65)" class="i">x</span> <span class="o">=</span> <span class="n">5</span> <span class="o">*</span> <span class="n">3</span>
<span class="l">4: </span>    <span class="k">let</span> <span onmouseout="hideTip(event, 'fstips33', 66)" onmouseover="showTip(event, 'fstips33', 66)" class="i">y</span> <span class="o">=</span> <span class="n">2</span> <span class="o">+</span> <span class="n">3</span>
<span class="l">5: </span>    <span onmouseout="hideTip(event, 'fstips32', 67)" onmouseover="showTip(event, 'fstips32', 67)" class="i">x</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fstips33', 68)" onmouseover="showTip(event, 'fstips33', 68)" class="i">y</span>
<span class="l">6: </span>  @&gt; <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fstips1', 69)" onmouseover="showTip(event, 'fstips1', 69)" class="i">FromQuotation</span><a target="_blank" class="fssniplink" href="http://tomasp.net/fswebsnippets">F# Web Snippets</a>
</pre>


<!-- HTML code for ToolTips -->
<div class="tip" id="fstips1">val FromQuotation : Expr -&gt; Expr<br /><br />Full name: Quotations.FromQuotation<br /></div>
<div class="tip" id="fstips2">val q : Expr<br /></div>
<div class="tip" id="fstips3">namespace Microsoft.FSharp.Quotations<br /></div>
<div class="tip" id="fstips4">Multiple items<br />type Expr =<br />&#160;&#160;class<br />&#160;&#160;&#160;&#160;override Equals : obj:obj -&gt; bool<br />&#160;&#160;&#160;&#160;member GetFreeVars : unit -&gt; seq&lt;Var&gt;<br />&#160;&#160;&#160;&#160;member Substitute : substitution:(Var -&gt; Expr option) -&gt; Expr<br />&#160;&#160;&#160;&#160;member CustomAttributes : Expr list<br />&#160;&#160;&#160;&#160;member Type : System.Type<br />&#160;&#160;&#160;&#160;static member AddressOf : target:Expr -&gt; Expr<br />&#160;&#160;&#160;&#160;static member AddressSet : target:Expr * value:Expr -&gt; Expr<br />&#160;&#160;&#160;&#160;static member Application : functionExpr:Expr * argument:Expr -&gt; Expr<br />&#160;&#160;&#160;&#160;static member Applications : functionExpr:Expr * arguments:Expr list list -&gt; Expr<br />&#160;&#160;&#160;&#160;static member Call : methodInfo:System.Reflection.MethodInfo * arguments:Expr list -&gt; Expr<br />&#160;&#160;&#160;&#160;static member Call : obj:Expr * methodInfo:System.Reflection.MethodInfo * arguments:Expr list -&gt; Expr<br />&#160;&#160;&#160;&#160;static member Cast : source:Expr -&gt; Expr&lt;'T&gt;<br />&#160;&#160;&#160;&#160;static member Coerce : source:Expr * target:System.Type -&gt; Expr<br />&#160;&#160;&#160;&#160;static member DefaultValue : expressionType:System.Type -&gt; Expr<br />&#160;&#160;&#160;&#160;static member Deserialize : qualifyingType:System.Type * spliceTypes:System.Type list * spliceExprs:Expr list * bytes:byte [] -&gt; Expr<br />&#160;&#160;&#160;&#160;static member FieldGet : fieldInfo:System.Reflection.FieldInfo -&gt; Expr<br />&#160;&#160;&#160;&#160;static member FieldGet : obj:Expr * fieldInfo:System.Reflection.FieldInfo -&gt; Expr<br />&#160;&#160;&#160;&#160;static member FieldSet : fieldInfo:System.Reflection.FieldInfo * value:Expr -&gt; Expr<br />&#160;&#160;&#160;&#160;static member FieldSet : obj:Expr * fieldInfo:System.Reflection.FieldInfo * value:Expr -&gt; Expr<br />&#160;&#160;&#160;&#160;static member ForIntegerRangeLoop : loopVariable:Var * start:Expr * endExpr:Expr * body:Expr -&gt; Expr<br />&#160;&#160;&#160;&#160;static member GlobalVar : name:string -&gt; Expr&lt;'T&gt;<br />&#160;&#160;&#160;&#160;static member IfThenElse : guard:Expr * thenExpr:Expr * elseExpr:Expr -&gt; Expr<br />&#160;&#160;&#160;&#160;static member Lambda : parameter:Var * body:Expr -&gt; Expr<br />&#160;&#160;&#160;&#160;static member Let : letVariable:Var * letExpr:Expr * body:Expr -&gt; Expr<br />&#160;&#160;&#160;&#160;static member LetRecursive : bindings:(Var * Expr) list * body:Expr -&gt; Expr<br />&#160;&#160;&#160;&#160;static member NewArray : elementType:System.Type * elements:Expr list -&gt; Expr<br />&#160;&#160;&#160;&#160;static member NewDelegate : delegateType:System.Type * parameters:Var list * body:Expr -&gt; Expr<br />&#160;&#160;&#160;&#160;static member NewObject : constructorInfo:System.Reflection.ConstructorInfo * arguments:Expr list -&gt; Expr<br />&#160;&#160;&#160;&#160;static member NewRecord : recordType:System.Type * elements:Expr list -&gt; Expr<br />&#160;&#160;&#160;&#160;static member NewTuple : elements:Expr list -&gt; Expr<br />&#160;&#160;&#160;&#160;static member NewUnionCase : unionCase:Reflection.UnionCaseInfo * arguments:Expr list -&gt; Expr<br />&#160;&#160;&#160;&#160;static member PropertyGet : property:System.Reflection.PropertyInfo * ?indexerArgs:Expr list -&gt; Expr<br />&#160;&#160;&#160;&#160;static member PropertyGet : obj:Expr * property:System.Reflection.PropertyInfo * ?indexerArgs:Expr list -&gt; Expr<br />&#160;&#160;&#160;&#160;static member PropertySet : property:System.Reflection.PropertyInfo * value:Expr * ?indexerArgs:Expr list -&gt; Expr<br />&#160;&#160;&#160;&#160;static member PropertySet : obj:Expr * property:System.Reflection.PropertyInfo * value:Expr * ?indexerArgs:Expr list -&gt; Expr<br />&#160;&#160;&#160;&#160;static member Quote : inner:Expr -&gt; Expr<br />&#160;&#160;&#160;&#160;static member RegisterReflectedDefinitions : assembly:System.Reflection.Assembly * resource:string * serializedValue:byte [] -&gt; unit<br />&#160;&#160;&#160;&#160;static member Sequential : first:Expr * second:Expr -&gt; Expr<br />&#160;&#160;&#160;&#160;static member TryFinally : body:Expr * compensation:Expr -&gt; Expr<br />&#160;&#160;&#160;&#160;static member TryGetReflectedDefinition : methodBase:System.Reflection.MethodBase -&gt; Expr option<br />&#160;&#160;&#160;&#160;static member TryWith : body:Expr * filterVar:Var * filterBody:Expr * catchVar:Var * catchBody:Expr -&gt; Expr<br />&#160;&#160;&#160;&#160;static member TupleGet : tuple:Expr * index:int -&gt; Expr<br />&#160;&#160;&#160;&#160;static member TypeTest : source:Expr * target:System.Type -&gt; Expr<br />&#160;&#160;&#160;&#160;static member UnionCaseTest : source:Expr * unionCase:Reflection.UnionCaseInfo -&gt; Expr<br />&#160;&#160;&#160;&#160;static member Value : value:'T -&gt; Expr<br />&#160;&#160;&#160;&#160;static member Value : value:obj * expressionType:System.Type -&gt; Expr<br />&#160;&#160;&#160;&#160;static member Var : variable:Var -&gt; Expr<br />&#160;&#160;&#160;&#160;static member VarSet : variable:Var * value:Expr -&gt; Expr<br />&#160;&#160;&#160;&#160;static member WhileLoop : guard:Expr * body:Expr -&gt; Expr<br />&#160;&#160;end<br /><br />Full name: Microsoft.FSharp.Quotations.Expr<br /><br />--------------------<br /><br />type Expr&lt;'T&gt; =<br />&#160;&#160;class<br />&#160;&#160;&#160;&#160;inherit Expr<br />&#160;&#160;&#160;&#160;member Raw : Expr<br />&#160;&#160;end<br /><br />Full name: Microsoft.FSharp.Quotations.Expr&lt;_&gt;<br /><br />&#160;&#160;type: Expr&lt;'T&gt;<br />&#160;&#160;inherits: Expr<br /></div>
<div class="tip" id="fstips5">Multiple items<br />active recognizer Var: Expr -&gt; Var option<br /><br />Full name: Microsoft.FSharp.Quotations.Patterns.( |Var|_| )<br /><br />--------------------<br /><br />type Var =<br />&#160;&#160;class<br />&#160;&#160;&#160;&#160;interface System.IComparable<br />&#160;&#160;&#160;&#160;new : name:string * typ:System.Type * ?isMutable:bool -&gt; Var<br />&#160;&#160;&#160;&#160;member IsMutable : bool<br />&#160;&#160;&#160;&#160;member Name : string<br />&#160;&#160;&#160;&#160;member Type : System.Type<br />&#160;&#160;&#160;&#160;static member Global : name:string * typ:System.Type -&gt; Var<br />&#160;&#160;end<br /><br />Full name: Microsoft.FSharp.Quotations.Var<br /><br />&#160;&#160;type: Var<br />&#160;&#160;implements: System.IComparable<br /></div>
<div class="tip" id="fstips6">val v : Var<br /><br />&#160;&#160;type: Var<br />&#160;&#160;implements: System.IComparable<br /></div>
<div class="tip" id="fstips7">union case Expr.Variable: string -&gt; Expr<br /></div>
<div class="tip" id="fstips8">property Var.Name: string<br /></div>
<div class="tip" id="fstips9">Multiple items<br />union case Expr.Value: int -&gt; Expr<br /><br />--------------------<br /><br />active recognizer Value: Expr -&gt; (obj * System.Type) option<br /><br />Full name: Microsoft.FSharp.Quotations.Patterns.( |Value|_| )<br /></div>
<div class="tip" id="fstips10">val o : obj<br /></div>
<div class="tip" id="fstips11">val t : System.Type<br /><br />&#160;&#160;type: System.Type<br />&#160;&#160;implements: System.Reflection.ICustomAttributeProvider<br />&#160;&#160;implements: System.Runtime.InteropServices._MemberInfo<br />&#160;&#160;implements: System.Runtime.InteropServices._Type<br />&#160;&#160;implements: System.Reflection.IReflect<br />&#160;&#160;inherits: System.Reflection.MemberInfo<br /></div>
<div class="tip" id="fstips12">val typeof&lt;'T&gt; : System.Type<br /><br />Full name: Microsoft.FSharp.Core.Operators.typeof<br /></div>
<div class="tip" id="fstips13">Multiple items<br />val int : 'T -&gt; int (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.int<br /><br />--------------------<br /><br />type int&lt;'Measure&gt; = int<br /><br />Full name: Microsoft.FSharp.Core.int&lt;_&gt;<br /><br />&#160;&#160;type: int&lt;'Measure&gt;<br />&#160;&#160;implements: System.IComparable<br />&#160;&#160;implements: System.IConvertible<br />&#160;&#160;implements: System.IFormattable<br />&#160;&#160;implements: System.IComparable&lt;int&lt;'Measure&gt;&gt;<br />&#160;&#160;implements: System.IEquatable&lt;int&lt;'Measure&gt;&gt;<br />&#160;&#160;inherits: System.ValueType<br /><br /><br />--------------------<br /><br />type int = int32<br /><br />Full name: Microsoft.FSharp.Core.int<br /><br />&#160;&#160;type: int<br />&#160;&#160;implements: System.IComparable<br />&#160;&#160;implements: System.IFormattable<br />&#160;&#160;implements: System.IConvertible<br />&#160;&#160;implements: System.IComparable&lt;int&gt;<br />&#160;&#160;implements: System.IEquatable&lt;int&gt;<br />&#160;&#160;inherits: System.ValueType<br /></div>
<div class="tip" id="fstips14">active recognizer Call: Expr -&gt; (Expr option * System.Reflection.MethodInfo * Expr list) option<br /><br />Full name: Microsoft.FSharp.Quotations.Patterns.( |Call|_| )<br /></div>
<div class="tip" id="fstips15">val m : System.Reflection.MethodInfo<br /><br />&#160;&#160;type: System.Reflection.MethodInfo<br />&#160;&#160;implements: System.Reflection.ICustomAttributeProvider<br />&#160;&#160;implements: System.Runtime.InteropServices._MemberInfo<br />&#160;&#160;implements: System.Runtime.InteropServices._MethodBase<br />&#160;&#160;implements: System.Runtime.InteropServices._MethodInfo<br />&#160;&#160;inherits: System.Reflection.MethodBase<br />&#160;&#160;inherits: System.Reflection.MemberInfo<br /></div>
<div class="tip" id="fstips16">val x : Expr<br /></div>
<div class="tip" id="fstips17">val y : Expr<br /></div>
<div class="tip" id="fstips18">property System.Reflection.MemberInfo.Name: string<br /></div>
<div class="tip" id="fstips19">union case Expr.Add: Expr * Expr -&gt; Expr<br /></div>
<div class="tip" id="fstips20">union case Expr.Mul: Expr * Expr -&gt; Expr<br /></div>
<div class="tip" id="fstips21">active recognizer Let: Expr -&gt; (Var * Expr * Expr) option<br /><br />Full name: Microsoft.FSharp.Quotations.Patterns.( |Let|_| )<br /></div>
<div class="tip" id="fstips22">val defined : Expr<br /></div>
<div class="tip" id="fstips23">val inBlock : Expr<br /></div>
<div class="tip" id="fstips24">val inBlock : Expr<br /><br />&#160;&#160;type: Expr<br />&#160;&#160;implements: System.IEquatable&lt;Expr&gt;<br />&#160;&#160;implements: System.Collections.IStructuralEquatable<br />&#160;&#160;implements: System.IComparable&lt;Expr&gt;<br />&#160;&#160;implements: System.IComparable<br />&#160;&#160;implements: System.Collections.IStructuralComparable<br /></div>
<div class="tip" id="fstips25">val defined : Expr<br /><br />&#160;&#160;type: Expr<br />&#160;&#160;implements: System.IEquatable&lt;Expr&gt;<br />&#160;&#160;implements: System.Collections.IStructuralEquatable<br />&#160;&#160;implements: System.IComparable&lt;Expr&gt;<br />&#160;&#160;implements: System.IComparable<br />&#160;&#160;implements: System.Collections.IStructuralComparable<br /></div>
<div class="tip" id="fstips26">val Replace : Expr -&gt; Expr -&gt; Expr -&gt; Expr<br /><br />Full name: Quotations.Replace<br /></div>
<div class="tip" id="fstips27">val e : Expr<br /></div>
<div class="tip" id="fstips28">val printfn : Printf.TextWriterFormat&lt;'T&gt; -&gt; 'T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn<br /></div>
<div class="tip" id="fstips29">val raise : System.Exception -&gt; 'T<br /><br />Full name: Microsoft.FSharp.Core.Operators.raise<br /></div>
<div class="tip" id="fstips30">exception QuotationError of Expr<br /><br />Full name: Quotations.QuotationError<br /></div>
<div class="tip" id="fstips31">val code : Expr<br /><br />Full name: Quotations.code<br /><br />&#160;&#160;type: Expr<br />&#160;&#160;implements: System.IEquatable&lt;Expr&gt;<br />&#160;&#160;implements: System.Collections.IStructuralEquatable<br />&#160;&#160;implements: System.IComparable&lt;Expr&gt;<br />&#160;&#160;implements: System.IComparable<br />&#160;&#160;implements: System.Collections.IStructuralComparable<br /></div>
<div class="tip" id="fstips32">val x : int<br /><br />&#160;&#160;type: int<br />&#160;&#160;implements: System.IComparable<br />&#160;&#160;implements: System.IFormattable<br />&#160;&#160;implements: System.IConvertible<br />&#160;&#160;implements: System.IComparable&lt;int&gt;<br />&#160;&#160;implements: System.IEquatable&lt;int&gt;<br />&#160;&#160;inherits: System.ValueType<br /></div>
<div class="tip" id="fstips33">val y : int<br /><br />&#160;&#160;type: int<br />&#160;&#160;implements: System.IComparable<br />&#160;&#160;implements: System.IFormattable<br />&#160;&#160;implements: System.IConvertible<br />&#160;&#160;implements: System.IComparable&lt;int&gt;<br />&#160;&#160;implements: System.IEquatable&lt;int&gt;<br />&#160;&#160;inherits: System.ValueType<br /></div>
</body></html>