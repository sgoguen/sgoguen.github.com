<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <link rel="stylesheet" type="text/css" href="style.css" />
  <div id="preview">
    <pre class="fssnip">
<span class="l">  1: </span><span class="k">type</span> <span onmouseout="hideTip(event, 'fst5', 8)" onmouseover="showTip(event, 'fst5', 8)" class="i">var</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fst6', 9)" onmouseover="showTip(event, 'fst6', 9)" class="i">string</span>
<span class="l">  2: </span><span class="k">type</span> <span onmouseout="hideTip(event, 'fst7', 10)" onmouseover="showTip(event, 'fst7', 10)" class="i">term</span> <span class="o">=</span> 
<span class="l">  3: </span>  | <span onmouseout="hideTip(event, 'fst8', 11)" onmouseover="showTip(event, 'fst8', 11)" class="i">Lambda</span> <span class="k">of</span> <span class="i">Variable</span><span class="o">:</span><span onmouseout="hideTip(event, 'fst5', 12)" onmouseover="showTip(event, 'fst5', 12)" class="i">var</span> <span class="o">*</span> <span class="i">Body</span><span class="o">:</span><span onmouseout="hideTip(event, 'fst7', 13)" onmouseover="showTip(event, 'fst7', 13)" class="i">term</span>
<span class="l">  4: </span>  | <span onmouseout="hideTip(event, 'fst9', 14)" onmouseover="showTip(event, 'fst9', 14)" class="i">Var</span> <span class="k">of</span> <span class="i">Variable</span><span class="o">:</span><span onmouseout="hideTip(event, 'fst5', 15)" onmouseover="showTip(event, 'fst5', 15)" class="i">var</span>
<span class="l">  5: </span>  | <span class="i">App</span> <span class="k">of</span> <span class="i">Left</span><span class="o">:</span><span onmouseout="hideTip(event, 'fst7', 16)" onmouseover="showTip(event, 'fst7', 16)" class="i">term</span> <span class="o">*</span> <span class="i">Right</span><span class="o">:</span><span onmouseout="hideTip(event, 'fst7', 17)" onmouseover="showTip(event, 'fst7', 17)" class="i">term</span>
<span class="l">  6: </span>
<span class="l">  7  </span><span class="c">// ID := λx.x</span>
<span class="l">  8: </span><span class="c">// TRUE := λx.λy.x</span>
<span class="l">  9: </span><span class="c">// FALSE := λx.λy.y</span>
<span class="l"> 10: </span><span class="c">// AND := λp.λq.p q p</span>
<span class="l"> 11: </span><span class="k">let</span> <span onmouseout="hideTip(event, 'fst36', 117)" onmouseover="showTip(event, 'fst36', 117)" class="i">Id</span> <span class="o">=</span> <span class="i">Abstraction</span>(<span class="s">"</span><span class="s">x</span><span class="s">"</span>, <span class="i">Variable</span>(<span class="s">"</span><span class="s">x</span><span class="s">"</span>))
<span class="l"> 12: </span><span class="k">let</span> <span onmouseout="hideTip(event, 'fst37', 118)" onmouseover="showTip(event, 'fst37', 118)" class="i">True</span> <span class="o">=</span> <span class="i">Abstraction</span>(<span class="s">"</span><span class="s">x</span><span class="s">"</span>, <span class="i">Abstraction</span>(<span class="s">"</span><span class="s">y</span><span class="s">"</span>, <span class="i">Variable</span>(<span class="s">"</span><span class="s">x</span><span class="s">"</span>)))
<span class="l"> 13: </span><span class="k">let</span> <span onmouseout="hideTip(event, 'fst38', 119)" onmouseover="showTip(event, 'fst38', 119)" class="i">False</span> <span class="o">=</span> <span class="i">Abstraction</span>(<span class="s">"</span><span class="s">x</span><span class="s">"</span>, <span class="i">Abstraction</span>(<span class="s">"</span><span class="s">y</span><span class="s">"</span>, <span class="i">Variable</span>(<span class="s">"</span><span class="s">y</span><span class="s">"</span>)))
<span class="l"> 14: </span><span class="k">let</span> <span onmouseout="hideTip(event, 'fst39', 120)" onmouseover="showTip(event, 'fst39', 120)" class="i">And</span> <span class="o">=</span> <span class="i">Abstraction</span>(<span class="s">"</span><span class="s">p</span><span class="s">"</span>, <span class="i">Abstraction</span>(<span class="s">"</span><span class="s">q</span><span class="s">"</span>, 
<span class="l"> 15: </span>  <span onmouseout="hideTip(event, 'fst16', 121)" onmouseover="showTip(event, 'fst16', 121)" class="i">Application</span>( <span onmouseout="hideTip(event, 'fst16', 122)" onmouseover="showTip(event, 'fst16', 122)" class="i">Application</span>( <span class="i">Variable</span>(<span class="s">"</span><span class="s">p</span><span class="s">"</span>, <span class="i">Variable</span>(<span class="s">"</span><span class="s">q</span><span class="s">"</span>)), <span class="i">Variable</span>(<span class="s">"</span><span class="s">p</span><span class="s">"</span>))))
</pre>
    <div class="tip" id="fst1">namespace Microsoft</div>
    <div class="tip" id="fst2">namespace Microsoft.FSharp</div>
    <div class="tip" id="fst3">namespace Microsoft.FSharp.Quotations</div>
    <div class="tip" id="fst4">module Patterns<br /><br />from Microsoft.FSharp.Quotations</div>
    <div class="tip" id="fst5">type var = string<br /><br />Full name: Snippet.var<br /><br />&nbsp;&nbsp;type: var<br />&nbsp;&nbsp;implements: System.IComparable<br />&nbsp;&nbsp;implements: System.ICloneable<br />&nbsp;&nbsp;implements: System.IConvertible<br />&nbsp;&nbsp;implements: System.IComparable&lt;string&gt;<br />&nbsp;&nbsp;implements: seq&lt;char&gt;<br />&nbsp;&nbsp;implements: System.Collections.IEnumerable<br />&nbsp;&nbsp;implements: System.IEquatable&lt;string&gt;<br /></div>
    <div class="tip" id="fst6">Multiple items<br />val string : 'T -&gt; string<br /><br />Full name: Microsoft.FSharp.Core.Operators.string<br /><br />--------------------<br />type string = System.String<br /><br />Full name: Microsoft.FSharp.Core.string<br /><br />&nbsp;&nbsp;type: string<br />&nbsp;&nbsp;implements: System.IComparable<br />&nbsp;&nbsp;implements: System.ICloneable<br />&nbsp;&nbsp;implements: System.IConvertible<br />&nbsp;&nbsp;implements: System.IComparable&lt;string&gt;<br />&nbsp;&nbsp;implements: seq&lt;char&gt;<br />&nbsp;&nbsp;implements: System.Collections.IEnumerable<br />&nbsp;&nbsp;implements: System.IEquatable&lt;string&gt;<br /></div>
    <div class="tip" id="fst7">type term = | Lambda of obj<br /><br />Full name: Snippet.term<br /><br />&nbsp;&nbsp;type: term<br />&nbsp;&nbsp;implements: System.IEquatable&lt;term&gt;<br />&nbsp;&nbsp;implements: System.Collections.IStructuralEquatable<br /></div>
    <div class="tip" id="fst8">Multiple items<br />union case term.Lambda: obj -&gt; term<br /><br />--------------------<br />active recognizer Lambda: Expr -&gt; (Var * Expr) option<br /><br />Full name: Microsoft.FSharp.Quotations.Patterns.( |Lambda|_| )</div>
    <div class="tip" id="fst9">Multiple items<br />active recognizer Var: Expr -&gt; Var option<br /><br />Full name: Microsoft.FSharp.Quotations.Patterns.( |Var|_| )<br /><br />--------------------<br />type Var =<br />&nbsp;&nbsp;class<br />&nbsp;&nbsp;&nbsp;&nbsp;interface System.IComparable<br />&nbsp;&nbsp;&nbsp;&nbsp;new : name:string * typ:System.Type * ?isMutable:bool -&gt; Var<br />&nbsp;&nbsp;&nbsp;&nbsp;member IsMutable : bool<br />&nbsp;&nbsp;&nbsp;&nbsp;member Name : string<br />&nbsp;&nbsp;&nbsp;&nbsp;member Type : System.Type<br />&nbsp;&nbsp;&nbsp;&nbsp;static member Global : name:string * typ:System.Type -&gt; Var<br />&nbsp;&nbsp;end<br /><br />Full name: Microsoft.FSharp.Quotations.Var<br /><br />&nbsp;&nbsp;type: Var<br />&nbsp;&nbsp;implements: System.IComparable<br /></div>
    <div class="tip" id="fst10">namespace System</div>
    <div class="tip" id="fst11">type Char =<br />&nbsp;&nbsp;struct<br />&nbsp;&nbsp;&nbsp;&nbsp;member CompareTo : obj -&gt; int<br />&nbsp;&nbsp;&nbsp;&nbsp;member CompareTo : char -&gt; int<br />&nbsp;&nbsp;&nbsp;&nbsp;member Equals : obj -&gt; bool<br />&nbsp;&nbsp;&nbsp;&nbsp;member Equals : char -&gt; bool<br />&nbsp;&nbsp;&nbsp;&nbsp;member GetHashCode : unit -&gt; int<br />&nbsp;&nbsp;&nbsp;&nbsp;member GetTypeCode : unit -&gt; System.TypeCode<br />&nbsp;&nbsp;&nbsp;&nbsp;member ToString : unit -&gt; string<br />&nbsp;&nbsp;&nbsp;&nbsp;member ToString : System.IFormatProvider -&gt; string<br />&nbsp;&nbsp;&nbsp;&nbsp;static val MaxValue : char<br />&nbsp;&nbsp;&nbsp;&nbsp;static val MinValue : char<br />&nbsp;&nbsp;&nbsp;&nbsp;static member ConvertFromUtf32 : int -&gt; string<br />&nbsp;&nbsp;&nbsp;&nbsp;static member ConvertToUtf32 : char * char -&gt; int<br />&nbsp;&nbsp;&nbsp;&nbsp;static member ConvertToUtf32 : string * int -&gt; int<br />&nbsp;&nbsp;&nbsp;&nbsp;static member GetNumericValue : char -&gt; float<br />&nbsp;&nbsp;&nbsp;&nbsp;static member GetNumericValue : string * int -&gt; float<br />&nbsp;&nbsp;&nbsp;&nbsp;static member GetUnicodeCategory : char -&gt; System.Globalization.UnicodeCategory<br />&nbsp;&nbsp;&nbsp;&nbsp;static member GetUnicodeCategory : string * int -&gt; System.Globalization.UnicodeCategory<br />&nbsp;&nbsp;&nbsp;&nbsp;static member IsControl : char -&gt; bool<br />&nbsp;&nbsp;&nbsp;&nbsp;static member IsControl : string * int -&gt; bool<br />&nbsp;&nbsp;&nbsp;&nbsp;static member IsDigit : char -&gt; bool<br />&nbsp;&nbsp;&nbsp;&nbsp;static member IsDigit : string * int -&gt; bool<br />&nbsp;&nbsp;&nbsp;&nbsp;static member IsHighSurrogate : char -&gt; bool<br />&nbsp;&nbsp;&nbsp;&nbsp;static member IsHighSurrogate : string * int -&gt; bool<br />&nbsp;&nbsp;&nbsp;&nbsp;static member IsLetter : char -&gt; bool<br />&nbsp;&nbsp;&nbsp;&nbsp;static member IsLetter : string * int -&gt; bool<br />&nbsp;&nbsp;&nbsp;&nbsp;static member IsLetterOrDigit : char -&gt; bool<br />&nbsp;&nbsp;&nbsp;&nbsp;static member IsLetterOrDigit : string * int -&gt; bool<br />&nbsp;&nbsp;&nbsp;&nbsp;static member IsLowSurrogate : char -&gt; bool<br />&nbsp;&nbsp;&nbsp;&nbsp;static member IsLowSurrogate : string * int -&gt; bool<br />&nbsp;&nbsp;&nbsp;&nbsp;static member IsLower : char -&gt; bool<br />&nbsp;&nbsp;&nbsp;&nbsp;static member IsLower : string * int -&gt; bool<br />&nbsp;&nbsp;&nbsp;&nbsp;static member IsNumber : char -&gt; bool<br />&nbsp;&nbsp;&nbsp;&nbsp;static member IsNumber : string * int -&gt; bool<br />&nbsp;&nbsp;&nbsp;&nbsp;static member IsPunctuation : char -&gt; bool<br />&nbsp;&nbsp;&nbsp;&nbsp;static member IsPunctuation : string * int -&gt; bool<br />&nbsp;&nbsp;&nbsp;&nbsp;static member IsSeparator : char -&gt; bool<br />&nbsp;&nbsp;&nbsp;&nbsp;static member IsSeparator : string * int -&gt; bool<br />&nbsp;&nbsp;&nbsp;&nbsp;static member IsSurrogate : char -&gt; bool<br />&nbsp;&nbsp;&nbsp;&nbsp;static member IsSurrogate : string * int -&gt; bool<br />&nbsp;&nbsp;&nbsp;&nbsp;static member IsSurrogatePair : string * int -&gt; bool<br />&nbsp;&nbsp;&nbsp;&nbsp;static member IsSurrogatePair : char * char -&gt; bool<br />&nbsp;&nbsp;&nbsp;&nbsp;static member IsSymbol : char -&gt; bool<br />&nbsp;&nbsp;&nbsp;&nbsp;static member IsSymbol : string * int -&gt; bool<br />&nbsp;&nbsp;&nbsp;&nbsp;static member IsUpper : char -&gt; bool<br />&nbsp;&nbsp;&nbsp;&nbsp;static member IsUpper : string * int -&gt; bool<br />&nbsp;&nbsp;&nbsp;&nbsp;static member IsWhiteSpace : char -&gt; bool<br />&nbsp;&nbsp;&nbsp;&nbsp;static member IsWhiteSpace : string * int -&gt; bool<br />&nbsp;&nbsp;&nbsp;&nbsp;static member Parse : string -&gt; char<br />&nbsp;&nbsp;&nbsp;&nbsp;static member ToLower : char -&gt; char<br />&nbsp;&nbsp;&nbsp;&nbsp;static member ToLower : char * System.Globalization.CultureInfo -&gt; char<br />&nbsp;&nbsp;&nbsp;&nbsp;static member ToLowerInvariant : char -&gt; char<br />&nbsp;&nbsp;&nbsp;&nbsp;static member ToString : char -&gt; string<br />&nbsp;&nbsp;&nbsp;&nbsp;static member ToUpper : char -&gt; char<br />&nbsp;&nbsp;&nbsp;&nbsp;static member ToUpper : char * System.Globalization.CultureInfo -&gt; char<br />&nbsp;&nbsp;&nbsp;&nbsp;static member ToUpperInvariant : char -&gt; char<br />&nbsp;&nbsp;&nbsp;&nbsp;static member TryParse : string * char -&gt; bool<br />&nbsp;&nbsp;end<br /><br />Full name: System.Char<br /><br />&nbsp;&nbsp;type: System.Char<br />&nbsp;&nbsp;implements: System.IComparable<br />&nbsp;&nbsp;implements: System.IConvertible<br />&nbsp;&nbsp;implements: System.IComparable&lt;char&gt;<br />&nbsp;&nbsp;implements: System.IEquatable&lt;char&gt;<br />&nbsp;&nbsp;inherits: System.ValueType<br /></div>
    <div class="tip" id="fst12">System.Char.ConvertFromUtf32(utf32: int) : string</div>
    <div class="tip" id="fst13">val sprintf : Printf.StringFormat&lt;'T&gt; -&gt; 'T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.sprintf</div>
    <div class="tip" id="fst14">Multiple items<br />type Expr =<br />&nbsp;&nbsp;class<br />&nbsp;&nbsp;&nbsp;&nbsp;override Equals : obj:obj -&gt; bool<br />&nbsp;&nbsp;&nbsp;&nbsp;member GetFreeVars : unit -&gt; seq&lt;Var&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;member Substitute : substitution:(Var -&gt; Expr option) -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;member CustomAttributes : Expr list<br />&nbsp;&nbsp;&nbsp;&nbsp;member Type : System.Type<br />&nbsp;&nbsp;&nbsp;&nbsp;static member AddressOf : target:Expr -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member AddressSet : target:Expr * value:Expr -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member Application : functionExpr:Expr * argument:Expr -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member Applications : functionExpr:Expr * arguments:Expr list list -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member Call : methodInfo:System.Reflection.MethodInfo * arguments:Expr list -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member Call : obj:Expr * methodInfo:System.Reflection.MethodInfo * arguments:Expr list -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member Cast : source:Expr -&gt; Expr&lt;'T&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;static member Coerce : source:Expr * target:System.Type -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member DefaultValue : expressionType:System.Type -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member Deserialize : qualifyingType:System.Type * spliceTypes:System.Type list * spliceExprs:Expr list * bytes:byte [] -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member FieldGet : fieldInfo:System.Reflection.FieldInfo -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member FieldGet : obj:Expr * fieldInfo:System.Reflection.FieldInfo -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member FieldSet : fieldInfo:System.Reflection.FieldInfo * value:Expr -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member FieldSet : obj:Expr * fieldInfo:System.Reflection.FieldInfo * value:Expr -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member ForIntegerRangeLoop : loopVariable:Var * start:Expr * endExpr:Expr * body:Expr -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member GlobalVar : name:string -&gt; Expr&lt;'T&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;static member IfThenElse : guard:Expr * thenExpr:Expr * elseExpr:Expr -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member Lambda : parameter:Var * body:Expr -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member Let : letVariable:Var * letExpr:Expr * body:Expr -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member LetRecursive : bindings:(Var * Expr) list * body:Expr -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member NewArray : elementType:System.Type * elements:Expr list -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member NewDelegate : delegateType:System.Type * parameters:Var list * body:Expr -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member NewObject : constructorInfo:System.Reflection.ConstructorInfo * arguments:Expr list -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member NewRecord : recordType:System.Type * elements:Expr list -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member NewTuple : elements:Expr list -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member NewUnionCase : unionCase:Reflection.UnionCaseInfo * arguments:Expr list -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member PropertyGet : property:System.Reflection.PropertyInfo * ?indexerArgs:Expr list -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member PropertyGet : obj:Expr * property:System.Reflection.PropertyInfo * ?indexerArgs:Expr list -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member PropertySet : property:System.Reflection.PropertyInfo * value:Expr * ?indexerArgs:Expr list -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member PropertySet : obj:Expr * property:System.Reflection.PropertyInfo * value:Expr * ?indexerArgs:Expr list -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member Quote : inner:Expr -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member RegisterReflectedDefinitions : assembly:System.Reflection.Assembly * resource:string * serializedValue:byte [] -&gt; unit<br />&nbsp;&nbsp;&nbsp;&nbsp;static member Sequential : first:Expr * second:Expr -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member TryFinally : body:Expr * compensation:Expr -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member TryGetReflectedDefinition : methodBase:System.Reflection.MethodBase -&gt; Expr option<br />&nbsp;&nbsp;&nbsp;&nbsp;static member TryWith : body:Expr * filterVar:Var * filterBody:Expr * catchVar:Var * catchBody:Expr -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member TupleGet : tuple:Expr * index:int -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member TypeTest : source:Expr * target:System.Type -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member UnionCaseTest : source:Expr * unionCase:Reflection.UnionCaseInfo -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member Value : value:'T -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member Value : value:obj * expressionType:System.Type -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member Var : variable:Var -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member VarSet : variable:Var * value:Expr -&gt; Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;static member WhileLoop : guard:Expr * body:Expr -&gt; Expr<br />&nbsp;&nbsp;end<br /><br />Full name: Microsoft.FSharp.Quotations.Expr<br /><br />--------------------<br />type Expr&lt;'T&gt; =<br />&nbsp;&nbsp;class<br />&nbsp;&nbsp;&nbsp;&nbsp;inherit Expr<br />&nbsp;&nbsp;&nbsp;&nbsp;member Raw : Expr<br />&nbsp;&nbsp;end<br /><br />Full name: Microsoft.FSharp.Quotations.Expr&lt;_&gt;<br /><br />&nbsp;&nbsp;type: Expr&lt;'T&gt;<br />&nbsp;&nbsp;inherits: Expr<br /></div>
    <div class="tip" id="fst15">active recognizer Lambda: Expr -&gt; (Var * Expr) option<br /><br />Full name: Microsoft.FSharp.Quotations.Patterns.( |Lambda|_| )</div>
    <div class="tip" id="fst16">active recognizer Application: Expr -&gt; (Expr * Expr) option<br /><br />Full name: Microsoft.FSharp.Quotations.Patterns.( |Application|_| )</div>
    <div class="tip" id="fst17">active recognizer Var: Expr -&gt; Var option<br /><br />Full name: Microsoft.FSharp.Quotations.Patterns.( |Var|_| )</div>
    <div class="tip" id="fst18">active recognizer Call: Expr -&gt; (Expr option * System.Reflection.MethodInfo * Expr list) option<br /><br />Full name: Microsoft.FSharp.Quotations.Patterns.( |Call|_| )</div>
    <div class="tip" id="fst19">union case Option.Some: 'T -&gt; Option&lt;'T&gt;</div>
    <div class="tip" id="fst20">val raise : System.Exception -&gt; 'T<br /><br />Full name: Microsoft.FSharp.Core.Operators.raise</div>
    <div class="tip" id="fst21">type Exception =<br />&nbsp;&nbsp;class<br />&nbsp;&nbsp;&nbsp;&nbsp;new : unit -&gt; System.Exception<br />&nbsp;&nbsp;&nbsp;&nbsp;new : string -&gt; System.Exception<br />&nbsp;&nbsp;&nbsp;&nbsp;new : string * System.Exception -&gt; System.Exception<br />&nbsp;&nbsp;&nbsp;&nbsp;member Data : System.Collections.IDictionary<br />&nbsp;&nbsp;&nbsp;&nbsp;member GetBaseException : unit -&gt; System.Exception<br />&nbsp;&nbsp;&nbsp;&nbsp;member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit<br />&nbsp;&nbsp;&nbsp;&nbsp;member GetType : unit -&gt; System.Type<br />&nbsp;&nbsp;&nbsp;&nbsp;member HResult : int with get, set<br />&nbsp;&nbsp;&nbsp;&nbsp;member HelpLink : string with get, set<br />&nbsp;&nbsp;&nbsp;&nbsp;member InnerException : System.Exception<br />&nbsp;&nbsp;&nbsp;&nbsp;member Message : string<br />&nbsp;&nbsp;&nbsp;&nbsp;member Source : string with get, set<br />&nbsp;&nbsp;&nbsp;&nbsp;member StackTrace : string<br />&nbsp;&nbsp;&nbsp;&nbsp;member TargetSite : System.Reflection.MethodBase<br />&nbsp;&nbsp;&nbsp;&nbsp;member ToString : unit -&gt; string<br />&nbsp;&nbsp;end<br /><br />Full name: System.Exception<br /><br />&nbsp;&nbsp;type: System.Exception<br />&nbsp;&nbsp;implements: System.Runtime.Serialization.ISerializable<br />&nbsp;&nbsp;implements: System.Runtime.InteropServices._Exception<br /></div>
    <div class="tip" id="fst22">union case Option.None: Option&lt;'T&gt;</div>
    <div class="tip" id="fst23">Multiple items<br />val int : 'T -&gt; int (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.int<br /><br />--------------------<br />type int&lt;'Measure&gt; = int<br /><br />Full name: Microsoft.FSharp.Core.int&lt;_&gt;<br /><br />&nbsp;&nbsp;type: int&lt;'Measure&gt;<br />&nbsp;&nbsp;implements: System.IComparable<br />&nbsp;&nbsp;implements: System.IConvertible<br />&nbsp;&nbsp;implements: System.IFormattable<br />&nbsp;&nbsp;implements: System.IComparable&lt;int&lt;'Measure&gt;&gt;<br />&nbsp;&nbsp;implements: System.IEquatable&lt;int&lt;'Measure&gt;&gt;<br />&nbsp;&nbsp;inherits: System.ValueType<br /><br /><br />--------------------<br />type int = int32<br /><br />Full name: Microsoft.FSharp.Core.int<br /><br />&nbsp;&nbsp;type: int<br />&nbsp;&nbsp;implements: System.IComparable<br />&nbsp;&nbsp;implements: System.IFormattable<br />&nbsp;&nbsp;implements: System.IConvertible<br />&nbsp;&nbsp;implements: System.IComparable&lt;int&gt;<br />&nbsp;&nbsp;implements: System.IEquatable&lt;int&gt;<br />&nbsp;&nbsp;inherits: System.ValueType<br /></div>
    <div class="tip" id="fst24">Multiple items<br />val seq : seq&lt;'T&gt; -&gt; seq&lt;'T&gt;<br /><br />Full name: Microsoft.FSharp.Core.Operators.seq<br /><br />--------------------<br />type seq&lt;'T&gt; = System.Collections.Generic.IEnumerable&lt;'T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.seq&lt;_&gt;<br /><br />&nbsp;&nbsp;type: seq&lt;'T&gt;<br />&nbsp;&nbsp;inherits: System.Collections.IEnumerable<br /></div>
    <div class="tip" id="fst25">Multiple items<br />val ref : 'T -&gt; 'T ref<br /><br />Full name: Microsoft.FSharp.Core.Operators.ref<br /><br />--------------------<br />type 'T ref = Ref&lt;'T&gt;<br /><br />Full name: Microsoft.FSharp.Core.ref&lt;_&gt;<br /><br />&nbsp;&nbsp;type: 'T ref<br />&nbsp;&nbsp;implements: System.Collections.IStructuralEquatable<br />&nbsp;&nbsp;implements: System.IComparable&lt;Ref&lt;'T&gt;&gt;<br />&nbsp;&nbsp;implements: System.IComparable<br />&nbsp;&nbsp;implements: System.Collections.IStructuralComparable<br /></div>
    <div class="tip" id="fst26">active recognizer Value: Expr -&gt; (obj * System.Type) option<br /><br />Full name: Microsoft.FSharp.Quotations.Patterns.( |Value|_| )</div>
    <div class="tip" id="fst27">module Seq<br /><br />from Microsoft.FSharp.Collections</div>
    <div class="tip" id="fst28">val truncate : int -&gt; seq&lt;'T&gt; -&gt; seq&lt;'T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.Seq.truncate</div>
    <div class="tip" id="fst29">val toList : seq&lt;'T&gt; -&gt; 'T list<br /><br />Full name: Microsoft.FSharp.Collections.Seq.toList</div>
    <div class="tip" id="fst30">val max : 'T -&gt; 'T -&gt; 'T (requires comparison)<br /><br />Full name: Microsoft.FSharp.Core.Operators.max</div>
    <div class="tip" id="fst31">val printfn : Printf.TextWriterFormat&lt;'T&gt; -&gt; 'T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn</div>
    <div class="tip" id="fst32">Multiple items<br />module List<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type List&lt;'T&gt; =<br />&nbsp;&nbsp;| ( [] )<br />&nbsp;&nbsp;| ( :: ) of 'T * 'T list<br />&nbsp;&nbsp;with<br />&nbsp;&nbsp;&nbsp;&nbsp;interface System.Collections.IEnumerable<br />&nbsp;&nbsp;&nbsp;&nbsp;interface System.Collections.Generic.IEnumerable&lt;'T&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;member Head : 'T<br />&nbsp;&nbsp;&nbsp;&nbsp;member IsEmpty : bool<br />&nbsp;&nbsp;&nbsp;&nbsp;member Item : index:int -&gt; 'T with get<br />&nbsp;&nbsp;&nbsp;&nbsp;member Length : int<br />&nbsp;&nbsp;&nbsp;&nbsp;member Tail : 'T list<br />&nbsp;&nbsp;&nbsp;&nbsp;static member Cons : head:'T * tail:'T list -&gt; 'T list<br />&nbsp;&nbsp;&nbsp;&nbsp;static member Empty : 'T list<br />&nbsp;&nbsp;end<br /><br />Full name: Microsoft.FSharp.Collections.List&lt;_&gt;<br /><br />&nbsp;&nbsp;type: List&lt;'T&gt;<br />&nbsp;&nbsp;implements: System.Collections.IStructuralEquatable<br />&nbsp;&nbsp;implements: System.IComparable&lt;List&lt;'T&gt;&gt;<br />&nbsp;&nbsp;implements: System.IComparable<br />&nbsp;&nbsp;implements: System.Collections.IStructuralComparable<br />&nbsp;&nbsp;implements: System.Collections.Generic.IEnumerable&lt;'T&gt;<br />&nbsp;&nbsp;implements: System.Collections.IEnumerable<br /></div>
    <div class="tip" id="fst33">val rev : 'T list -&gt; 'T list<br /><br />Full name: Microsoft.FSharp.Collections.List.rev</div>
    <div class="tip" id="fst34">val head : 'T list -&gt; 'T<br /><br />Full name: Microsoft.FSharp.Collections.List.head</div>
    <div class="tip" id="fst35">module Examples<br /><br />from Snippet</div>
    <div class="tip" id="fst36">val Id : obj<br /><br />Full name: Snippet.Examples.Id</div>
    <div class="tip" id="fst37">val True : obj<br /><br />Full name: Snippet.Examples.True</div>
    <div class="tip" id="fst38">val False : obj<br /><br />Full name: Snippet.Examples.False</div>
    <div class="tip" id="fst39">val And : obj<br /><br />Full name: Snippet.Examples.And</div>
    <div class="tip" id="fst40">union case term.Lambda: obj -&gt; term</div>
    <div class="tip" id="fst41">val x : obj</div>
    <div class="tip" id="fst42">val y : obj</div>
    <div class="tip" id="fst43">val Not : obj<br /><br />Full name: Snippet.Examples.Not</div>
    <div class="tip" id="fst44">val p : (obj -&gt; obj -&gt; obj)</div>
    <div class="tip" id="fst45">val a : obj</div>
    <div class="tip" id="fst46">val b : obj</div>
    <div class="tip" id="fst47">val p : obj</div>
    <div class="tip" id="fst48">val q : obj</div>
    <div class="tip" id="fst49">val ex1 : obj<br /><br />Full name: Snippet.Examples.ex1</div>
    <div class="tip" id="fst50">val Zero : obj<br /><br />Full name: Snippet.Examples.Zero</div>
    <div class="tip" id="fst51">val f : obj</div>
    <div class="tip" id="fst52">val One : obj<br /><br />Full name: Snippet.Examples.One</div>
    <div class="tip" id="fst53">val f : (obj -&gt; obj)</div>
    <div class="tip" id="fst54">val Two : obj<br /><br />Full name: Snippet.Examples.Two</div>
    <div class="tip" id="fst55">val Succ : obj<br /><br />Full name: Snippet.Examples.Succ</div>
    <div class="tip" id="fst56">val n : ((obj -&gt; obj) -&gt; obj -&gt; obj)</div>
    <div class="tip" id="fst57">val Plus : obj<br /><br />Full name: Snippet.Examples.Plus</div>
    <div class="tip" id="fst58">val m : (obj -&gt; obj -&gt; obj)</div>
    <div class="tip" id="fst59">val n : (obj -&gt; obj -&gt; obj)</div>
    <div class="tip" id="fst60">val ZeroSucc : obj<br /><br />Full name: Snippet.Examples.ZeroSucc</div>
    <div class="tip" id="fst61">val OnePlus : obj<br /><br />Full name: Snippet.Examples.OnePlus</div>

  </div>
    <script type="text/javascript" src="tips.js"></script>
</head>
<body>


</body>
</html>
